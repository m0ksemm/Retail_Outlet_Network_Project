НАЦІОНАЛЬНИЙ ТЕХНІЧНИЙ УНІВЕРСИТЕТ УКРАЇНИ 
«КИЇВСЬКИЙ ПОЛІТЕХНІЧНИЙ ІНСТИТУТ 
імені ІГОРЯ СІКОРСЬКОГО» 
 
ФАКУЛЬТЕТ ПРИКЛАДНОЇ МАТЕМАТИКИ 
 
«До захисту допущено» 
Завідувач кафедри 
__________ Віталій РОМАНКЕВИЧ 
(підпис) 
“___”  червня  2025 р. 
 
 
Дипломний проєкт 
на здобуття ступеня бакалавра 
за освітньо-професійною програмою 
«Системне програмування та спеціалізовані комп’ютерні системи» 
123 «Комп’ютерна інженерія» 
 
на тему: Комп’ютерна система управління мережею торгових точок 
Виконав: студент  IV курсу,  групи КВ-11 
Чебан Максим Дмитрович                                                 ___________________ 
                                                                                                                                                                        (підпис) 
Керівник доц.каф. СПСКС, к.т.н. 
Павловський Володимир Ілліч                                            ___________________                                                                                                             (підпис) 
  
Консультант з нормоконтролю  доц.каф. СПСКС, к.т.н                                     
Клятченко Ярослав Михайлович                                        ___________________ 
                                                                                                                                                                        (підпис) 
Рецензент доц.каф. ОТ ФІВТ, к.т.н.  
Верба Олександр Андрійович                                             ___________________                                            (підпис) 
 
 
 
Засвідчую, що у цьому дипломному 
проєкті немає запозичень з праць інших 
авторів без відповідних посилань. 
 
                                                                 Студент               _________________                                                                                                             (підпис) 
 
 
Київ – 2025 рік  
НАЦІОНАЛЬНИЙ ТЕХНІЧНИЙ УНІВЕРСИТЕТ УКРАЇНИ 
«КИЇВСЬКИЙ ПОЛІТЕХНІЧНИЙ ІНСТИТУТ 
імені ІГОРЯ СІКОРСЬКОГО» 
ФАКУЛЬТЕТ ПРИКЛАДНОЇ МАТЕМАТИКИ 
Кафедра системного програмування і спеціалізованих комп’ютерних 
систем 
Рівень вищої освіти – перший (бакалаврський) 
Освітньо-професійною програма 
«Системне програмування та спеціалізовані 
комп’ютерні системи» 
Спеціальність 123 «Комп'ютерна інженерія» 
ЗАТВЕРДЖУЮ 
Завідувач кафедри 
__________  Віталій РОМАНКЕВИЧ 
(підпис) 
“___”  червня  2025 р. 
ЗАВДАННЯ 
на дипломний проєкт студента 
Чебана Максима Дмитровича 
1. Тема проєкту «Комп’ютерна система управління мережею торгових точок», 
керівник проєкту асистент каф. СПСКС, д.ф. 
Павловський Володимир Ілліч, 
затверджені наказом по університету від «30» квітня 
2. Термін подання студентом проєкту   ___________ 
3. Вихідні дані до проєкту див. Технічне завдання.  
4. Зміст пояснювальної записки: 
1) Аналіз існуючих рішень 
2) Розробка серверного додатку 
3) Розробка клієнтського додатку 
4) Тестування обох програм 
5) Шляхи поліпшення та перспективи розвитку 
5. Перелік графічного матеріалу: 
1) Схема алгоритму роботи серверного застосунку 
2) Схема алгоритму роботи клієнтського застосунку 
3) Алгоритм роботи системи 
4) Діаграми класів серверного та клієнтського додатків 
6. Консультанти розділів проєкту 
Розділ Прізвище, ініціали та посада консультанта 
Підпис, дата 
завдання  
видав 
Нормоконтроль Клятченко Я.М., доц.каф. СПСКС, к.т.н   
завдання 
прийняв 
7. Дата видачі завдання «31» квітня 2025 р. 
Календарний план 
№ 
з/п 
Назва етапів виконання  дипломного проєкту Термін виконання  
1 
Вивчення літератури за тематикою роботи 
етапів проєкту 
Примітка 
17.04.2025 
2 
Розроблення та узгодження технічного 
завдання 
Виконано 
30.04.2025 
3 
Аналіз існуючих рішень 
Виконано 
05.05.2025 
4 
Розробка структури додатку 
Виконано 
11.05.2025 
5 
Програмна реалізація додатку 
Виконано 
13.05.2025 
6 
Тестування додатку 
Виконано 
15.05.2025 
7 
Підготовка матеріалів першого розділу 
дипломного проекту 
16.05.2025 
Виконано 
Виконано 
8 
Підготовка матеріалів другого розділу 
дипломного проекту 
17.05.2025 
9 
Підготовка матеріалів третього розділу 
дипломного проекту 
Виконано 
20.05.2025 
10 
Підготовка матеріалів третього розділу 
дипломного проекту 
Виконано 
22.05.2025 
11 Підготовка матеріалів п’ятого розділу 
дипломного проекту 
Виконано 
Виконано 
12 Оформлення технічної документації проєкту 28.05.2025 
24.05.2025 
Виконано 
Студент   
Керівник проєкту   
Максим ЧЕБАН 
Володимир ПАВЛОВСЬКИЙ
АНОТАЦІЯ 
Кваліфікаційна робота включає пояснювальну записку (приблизно 70 с., 54 
рис., 4 додатки). 
КОМП’ЮТЕРНА СИСТЕМА УПРАВЛІННЯ МЕРЕЖЕЮ ТОРГОВИХ 
ТОЧОК. 
Об’єкт розробки — комп’ютерна система для централізованого управління 
мережею торгових точок. 
Мета розробки — створити комп’ютерну систему, яка забезпечує 
управління товарами, персоналом, обліком продажів, аналізом залишків та 
автоматизує аналітичну діяльність у розрізі кожної торгової точки. 
У ході розробки: 
− Сформульовані функціональні та нефункціональні вимоги до системи; 
− Спроєктована архітектура багатокомпонентної системи; 
− Розроблена структура бази даних з підтримкою зв’язків між об’єктами; 
− Реалізований додаток на базі .NET Windows Forms; 
− Впроваджено інтерфейс користувача з підтримкою ролей 
(адміністратор, менеджер, касир). 
Основні характеристики та можливості системи: 
− Управління товарами (каталог, категорії, залишки, ціни); 
− Ведення обліку продажів по кожній торговій точці; 
− Аналітика у вигляді таблиць та графіків; 
− Система ролей та авторизації; 
− Управління персоналом та призначення по магазинах; 
− Внутрішні переміщення товарів між точками (опціонально); 
У процесі розробки використано такі технології: мова програмування C#,  
фреймворк .NET Windows Forms, ASP.NET Core, система управління базами 
даних PostgreSQL, мова структурованих запитів SQL, HTML для створення 
шаблонів звітів. 
Можливе подальше вдосконалення системи за рахунок інтеграції зі 
сторонніми сервісами аналітики, підключенням мобільного додатку або 
хмарного зберігання. 
Ключові слова: комп’ютерна система, торгова точка, управління мережею, 
клієнт-серверна архітектура, C#, ASP.NET Core, Entity Framework Core, 
PostgreSQL, WinForms, RESTful API, ORM, інтерфейс користувача, категорії 
товарів, продажі, звітність, DataGridView, авторизація користувачів, система 
ролей, збереження даних, Excel-звіт.  
ANNOTATION 
The qualification work includes an explanatory note (approximately 70 p., 54 
fig., 4 appendices). 
COMPUTER MANAGEMENT SYSTEM FOR A NETWORK OF RETAIL POINTS. 
The object of development is a computer system for centralized management of a 
network of retail points. 
The purpose of the development is to create a computer system that provides 
management of goods, personnel, sales accounting, balance analysis and automates 
analytical activities in the context of each retail point. 
During the development: 
− functional and non-functional requirements for the system were formulated; 
− The architecture of a multi-component system was designed; 
− a database structure was developed with support for relationships between 
objects; 
− an application based on .NET Windows Forms was implemented; 
− a user interface with role support (administrator, manager, cashier) was 
implemented. 
Main features and capabilities of the system: 
− Product management (catalog, categories, balances, prices); 
− Sales accounting for each point of sale; 
− Analytics in the form of tables and graphs; 
− Role and authorization system; 
− Personnel management and store assignments; 
− Internal movement of goods between points (optional);  
The following technologies are used in the development process: C# programming 
language, .NET Windows Forms framework, ASP.NET Core, PostgreSQL database 
management system, SQL structured query language, HTML for creating report 
templates. 
The system can be further improved by integrating with third-party analytics services, 
connecting a mobile application or cloud storage. 
Keywords: computer system, point of sale, network management, client-server 
architecture, C#, ASP.NET Core, Entity Framework Core, PostgreSQL, WinForms, 
RESTful API, ORM, user interface, Product categories, sales, reporting, 
DataGridView, user authorization, role system, data storage, Excel report. 
 
Поз. 
Формат 
ПОЗНАЧЕННЯ НАЙМЕНУВАННЯ 
Кількість 
аркушів 
№ прим. 
Примітк
 и 
 А4 ІАЛЦ. 045440.002 ТЗ Комп’ютерна система 4   
   управління мережею    
   торгових точок    
   Технічне завдання    
       
 А4 
045
 440
 .00
 3 
ПЗ 
ІАЛЦ. 045440.003 ПЗ Комп’ютерна система 70   
   управління мережею    
   торгових точок    
   Пояснювальна записка    
       
 А4 ІАЛЦ. 045440.004 Д1 Схема алгоритму роботи 
 
1   
   серверного застосунку 
 
   
       
       
 А4 ІАЛЦ. 045440.005 Д2 Схема алгоритму роботи 
 
1   
   клієнтського застосунку 
 
   
       
 А4 ІАЛЦ. 045440.006 Д3 Алгоритм роботи системи 1    
       
 А1 ІАЛЦ. 045440.007 Д4 Діаграма класів 1   
   клієнтського та серверного    
     ІАЛЦ.045440.001 ОА      
Змін. Арк. № докум. Підпис Дата 
Розробив Чебан М. Д. 
 
  
Комп’ютерна система управління 
мережею торгових точок 
Опис альбому 
Літ. Аркуш Аркушів 
Перевірив Павловський В. І 
 
     1 2 
Консульт.    КПІ  
ім. Ігоря Сікорського, 
ФПМ КВ-11 
Н. контроль    
Зав. каф. Романкевич В.О. 
В.О. 
 
  
Поз. 
Формат 
ПОЗНАЧЕННЯ НАЙМЕНУВАННЯ 
Кількість 
аркушів 
№ прим. 
Примітк
 и 
   додатків 
 
   
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
        
       
       
       
     ІАЛЦ.045440.001 ОА      
Змін. Арк. № докум. Підпис Дата 
Розробив Чебан М. Д. 
 
  
Комп’ютерна система управління 
мережею торгових точок 
Опис альбому 
Літ. Аркуш Аркушів 
Перевірив Павловський В. І 
 
     2 2 
Консульт.    КПІ  
ім. Ігоря Сікорського, 
ФПМ КВ-11 
Н. контроль    
Зав. каф. Романкевич В.О. 
В.О. 
 
  
 
 
Комп’ютерна система управління мережею 
торгових точок 
Технічне  завдання НТУУ «КПІ ім. Ігоря 
Сікорського», ФПМ, КВ-11 
102 1 
Листів Лист Літ. Чебан М.Д. 
Романкевич В.О.  
Павловський В.І. 
 
Затв. 
 
Перев. 
Н. контр. 
Розроб. 
Дата Підп. № докум. Лист Зм
 м 
ІАЛЦ. 045440.002 ТЗ 
ЗМІСТ 
1. НАЙМЕНУВАННЯ ТА ГАЛУЗЬ РОЗРОБКИ ................................................... 2 
2. ПІДСТАВА ДЛЯ РОЗРОБКИ ............................................................................ 2 
3. ЦІЛЬ І ПРИЗНАЧЕННЯ РОБОТИ ..................................................................... 2 
4. ДЖЕРЕЛА РОЗРОБКИ ...................................................................................... 2 
5. ТЕХНІЧНІ ВИМОГИ ......................................................................................... 3 
   5.1. Вимоги до програмного продукту, що розробляється .................................. 3 
   5.2. Вимоги до апаратного забезпечення............................................................. 3 
   5.3. Вимоги до програмного та апаратного забезпечення користувача .............. 3 
6. ЕТАПИ РОЗРОБКИ ........................................................................................... 4 
 
 
 
 
1. НАЙМЕНУВАННЯ ТА ГАЛУЗЬ РОЗРОБКИ 
Назва розробки: «Комп’ютерна система управління мережею торгових 
точок». 
Галузь застосування: Автоматизація обліку товарів, продажів та управління 
торговими точками малого та середнього бізнесу. 
2. ПІДСТАВА ДЛЯ РОЗРОБКИ 
Підставою для розробки є завдання на дипломне проєктування на здобуття 
першого (бакалаврського) рівня вищої освіти, затверджене кафедрою системного 
програмування і спеціалізованих комп’ютерних систем Національного технічного 
університету України «Київський Політехнічний Інститут імені Ігоря 
Сікорського». 
3. ЦІЛЬ І ПРИЗНАЧЕННЯ РОБОТИ 
Метою даного проєкту є створення застосунку для централізованого 
управління мережею торгових точок, що дозволяє вести облік товарів, продажів, 
категорій, ролей користувачів, а також здійснювати базовий аналіз діяльності.  
4. ДЖЕРЕЛА РОЗРОБКИ 
Джерелом Джерелами інформації для розробки є: 
• науково-технічна та навчальна література з програмування, баз даних, 
архітектури програмного забезпечення; 
• документація до технологій C#, .NET, Windows Forms, ASP.NET CORE, 
PostgreSQL; 
• сучасні практики у сфері розробки облікових систем для торгівлі; 
• відкриті джерела, онлайн-статті та офіційна документація.. 
5. ТЕХНІЧНІ ВИМОГИ 
5.1. Вимоги до програмного продукту, що розробляється: 
• Віконний інтерфейс користувача на базі .NET Windows Forms; 
• Робота з базою даних PostgreSQL; 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.002 ТЗ 
ПЗ 
Лис
 т 
2 
• Можливість створення, редагування та перегляду: 
o Товарів (Products) 
o Категорій товарів (Categories) 
o Торгових точок (Stores) 
o Користувачів і ролей (Users, Roles) 
o Продажів (Sales) 
• Підтримка обліку залишків товару; 
• Аутентифікація користувачів; 
• Фільтрація, сортування та пошук даних; 
• Створення базових звітів. 
5.2. Вимоги до апаратного забезпечення 
• Процесор: Intel Core i5 або аналогічний AMD; 
• Оперативна пам’ять: від 8 ГБ; 
• Місце на диску: мінімум 500 МБ вільного простору; 
• **Підтримка запуску PostgreSQL-сервера або підключення до 
зовнішнього сервера. 
5.3. Вимоги до програмного та апаратного забезпечення користувача 
• Операційна система: Windows 10/11, macOS або Android (для мобільної 
версії); 
• Встановлене .NET середовище виконання; 
• Доступ до локального або хмарного серверу PostgreSQL; 
• Права на запис/читання локальних файлів (для експорту/імпорту даних). 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.002 ТЗ 
ПЗ 
Лис
 т 
3 
6. ЕТАПИ РОЗРОБКИ 
№ 
з/п 
Назва етапів виконання дипломного проекту 
Термін 
виконання етапів 
1.  Вивчення літератури за тематикою проекту 
2.  Розроблення та узгодження технічного завдання 
17.04.2025 
30.04.2025 
3.  Аналіз існуючих рішень 
4.  Підготовка матеріалів першого розділу 
дипломного проекту 
05.05.2025 
10.05.2025 
5.  Підготовка матеріалів другого розділу 
дипломного проекту 
18.05.2025 
6.  Підготовка серверної частини дипломного 
проекту 
19.05.2025 
7.  Підготовка графічної та клієнтської частини 
дипломного проекту 
20.05.2025 
8.  Оформлення документації дипломного проекту 
9.  Попередній огляд матеріалів диплому на кафедрі 30.05.2025 
25.05.2025 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.002 ТЗ 
ПЗ 
Лис
 т 
4 
Пояснювальна записка 
до дипломного проєкту 
на тему: «Комп’ютерна система управління мережею торгових точок» 
Київ -  2025 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
5 
ЗМІСТ 
ПЕРЕЛІК СКОРОЧЕНЬ, УМОВНИХ ПОЗНАЧЕНЬ, ТЕРМІНІВ……….…8 
ВСТУП…………………………………………………………………………9 
1. АНАЛІЗ СУЧАСНИХ КОМП’ЮТЕРНИХ СИСТЕМ УПРАВЛІННЯ 
МЕРЕЖЕЮ ТОРГОВИХ ТОЧОК……………………………………….10 
1.1.  Галузь застосування комп’ютерних систем управління  
торговими точками  ……………...………………..........................10 
1.2.  Огляд існуючих рішень та їх недоліки …………….......................10 
1.3.  Постановка задачі на розробку КС УМТТ ……………………….13 
2. ПРОЄКТУВАННЯ КОМП’ЮТЕРНОЇ СИСТЕМИ УПРАВЛІННЯ 
МЕРЕЖЕЮ ТОРГОВИХ ТОЧОК……………………………………….15 
2.1 
Основні вимоги до системи …………………………................15 
2.2 
2.3 
2.4 
2.5 
Архітектура комп’ютерної системи …………………………...16 
Проєктування бази даних ……………………………................19 
Проєктування інтерфейсів користувача ………………….……23 
Вибір технологій реалізації …………………………………….25 
2.5.1 
2.5.2 
2.5.3 
2.5.4 
Вибір мови програмування та фреймворків ……………25 
Вибір СУБД ………………………………………………25 
Вибір інструментів створення клієнтського додатку…..25 
Вибір технологій створення серверної частини ………..26 
3. РЕАЛІЗАЦІЯ КОМП’ЮТЕРНОЇ СИСТЕМИ УПРАВЛІННЯ   
МЕРЕЖЕЮ ТОРГОВИХ ТОЧОК…………………………………….….28 
3.1  
Реалізація серверної частини засобами ASP.NET ……………28 
3.1.1 
3.1.2 
3.1.3 
3.2           
Архітектура API та структура ………………………..….28 
Реалізація контролерів та обробка запитів ..……..……..32 
Реалізація доступу до бази даних засобами EF Core…...37 
Реалізація клієнтського застосунку засобами .NET WinForms.41 
3.2.1 
Головне меню та структура інтерфейсу ...…………41 
3.2.2 
Зм 
Лист 
№ докум. 
Підп. 
Робота з API ……………………………………….…45 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
6 
3.2.3 
Основні екрани та форми: товари, продажі,  
персонал, аналітика  ……………………………………...……………47 
4. АНАЛІЗ ТА ТЕСТУВАННЯ СИСТЕМИ УПРАВЛІННЯ МЕРЕЖЕЮ 
ТОРГОВИХ ТОЧОК………………………………………….………57 
4.1 
4.2 
Тестування функціоналу клієнтської частини ……………57 
Тестування API та запитів до БД …………………………..64 
5. ШЛЯХИ ПОЛІПШЕННЯ ТА ПЕРСПЕКТИВИ РОЗВИТКУ……...71 
5.1.Можливості розширення функціоналу ………………….............71 
5.2. Інтеграція з хмарними сервісами ……………………………….72 
ВИСНОВКИ ………………………………………………………………74 
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ…………………………………77 
ДОДАТКИ 
Додаток 1. ІАЛЦ. 045440.004 Д1 Схема алгоритму роботи серверного 
застосунку. 
Додаток 2. ІАЛЦ. 045440.005 Д2 Схема алгоритму роботи клієнтського 
застосунку. 
Додаток 3. ІАЛЦ. 045440.006 Д3 Алгоритм роботи системи. 
Додаток 4. ІАЛЦ. 045440.007 Д4 Діаграма класів клієнтського та 
серверного додатків. 
Додаток 5. Презентація. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
7 
ПЕРЕЛІК СКОРОЧЕНЬ, УМОВНИХ ПОЗНАЧЕНЬ, ТЕРМІНІВ 
Фреймворк (від англійського "framework" - каркас, платформа, структура) в 
програмуванні - це готові інструменти, бібліотеки та шаблони, які допомагають 
розробникам прискорити та спростити процес розробки програмного 
забезпечення. 
RESTful API — це архітектурний стиль створення інтерфейсів прикладного 
програмування, який базується на використанні HTTP-запитів для взаємодії з 
ресурсами. Основні типи запитів — GET, POST, PUT і DELETE — відповідають 
основним операціям: отримання, створення, оновлення та видалення даних. 
СУБД (система управління базами даних) - це програмне забезпечення, що 
дозволяє створювати, зберігати, оновлювати та витягувати дані з бази даних. Це 
своєрідний "інструмент" для роботи з базами даних, який забезпечує їх 
організацію, безпеку та зручність використання. 
ORM (Object-Relational Mapping) — це технологія, яка забезпечує зв’язок 
між реляційною базою даних і об’єктно-орієнтованим кодом, дозволяючи 
працювати з даними як з об’єктами без необхідності написання SQL-запитів 
вручну. Вона спрощує доступ до даних, уніфікує інтерфейси взаємодії та зменшує 
обсяг повторюваного коду, що сприяє пришвидшенню розробки. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
8 
ВСТУП 
У сучасних умовах активного розвитку торгівлі та цифрових технологій 
ефективне управління мережею торгових точок стає важливою складовою 
успішної діяльності підприємств. Зростаючий обсяг даних, необхідність 
швидкого прийняття рішень та контроль за процесами продажу вимагають 
впровадження сучасних комп’ютерних систем обліку та управління. 
Комп’ютерні системи автоматизації дають змогу не лише централізовано 
керувати окремими торговими точками, але й забезпечують інтеграцію різних 
підрозділів підприємства, оптимізують бізнес-процеси, зменшують вплив 
людського фактору та підвищують якість обслуговування клієнтів. 
Розвиток сучасних мов програмування, зокрема C# і платформ типу 
ASP .NET, а також потужних систем керування базами даних, таких як 
PostgreSQL, відкриває нові можливості для створення гнучких, масштабованих та 
зручних у використанні програмних рішень. 
Даний дипломний проєкт присвячено розробці комп’ютерної системи 
управління мережею торгових точок. У проєкті реалізовано облік товарів, 
управління користувачами, відстеження залишків продукції та роботу з 
категоріями товарів, що дозволяє забезпечити ефективну та надійну підтримку 
процесів торгівлі, а також отримання аналітичний даних цих процесів. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
9 
1. 
АНАЛІЗ СУЧАСНИХ КОМП’ЮТЕРНИХ СИСТЕМ УПРАВЛІННЯ 
МЕРЕЖЕЮ ТОРГОВИХ ТОЧОК 
1.1. Галузь застосування комп’ютерних систем управління торговими 
точками 
Комп’ютерні системи управління торговими точками — це комплексні 
програмно-апаратні засоби, призначені для автоматизації процесів продажу та 
управління торгівельною діяльністю у магазинах, ресторанах та інших 
комерційних закладах. Вони забезпечують оперативну обробку транзакцій, 
ведення товарного обліку, моніторинг роботи персоналу та надання аналітичних 
даних для підвищення ефективності бізнес-процесів. 
Комп’ютерні системи цього типу застосовуються у сфері роздрібної та 
оптової торгівлі для автоматизації процесів обліку товарів, продажів, аналітики, 
управління персоналом та взаємодії між окремими торговими об’єктами. Їхнє 
основне призначення — забезпечити ефективне функціонування магазинів, 
супермаркетів, аптек, складів, торгових мереж тощо. 
Такі системи охоплюють широкий спектр завдань: 
− контроль та реєстрація продажів; 
− облік і управління персоналом; 
− формування звітності для керівництва; 
− аналітика щодо прибутковості, асортименту та попиту; 
− синхронізація даних між центральним офісом і віддаленими магазинами. 
− облік залишків на складах і в торгових точках; 
Особливої актуальності такі системи набувають у великих торгових 
мережах, де необхідна координація десятків або навіть сотень магазинів, а також 
у підприємствах, які прагнуть підвищити ефективність бізнес-процесів за рахунок 
цифровізації. 
1.2. Огляд існуючих рішень та їх недоліки 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
10 
На сучасному ринку існує велика кількість програмних рішень для 
автоматизації управління торговими точками. Серед найпопулярніших можна 
виділити такі системи, як Poster POS, 1С: Підприємство, RetailCRM, iiko (для 
ресторанного бізнесу), Square POS, Lightspeed, Shopify POS та інші. Ці системи 
надають широкий набір функцій — від обліку товарів до аналітики продажів, 
керування персоналом та клієнтськими програми. 
На сучасному ринку існує велика кількість програмних рішень для 
автоматизації управління торговими точками. Серед найпопулярніших можна 
виділити такі системи, як Poster POS, 1С: Підприємство, RetailCRM, iiko (для 
ресторанного бізнесу), Square POS, Lightspeed, Shopify POS та інші. Ці системи 
надають широкий набір функцій — від обліку товарів до аналітики продажів, 
керування персоналом та клієнтськими програмами. 
Poster POS[1] 
Poster POS — це хмарна Point of sale (POS) система, орієнтована переважно 
на кафе, бари та ресторани. Вона дозволяє керувати замовленнями, обліком 
товарів, автоматизувати розрахунки та друк чеків, а також контролювати залишки 
на складі. Система має простий інтерфейс та мобільний застосунок. Основним 
недоліком є обмеження у кастомізації під нестандартні процеси, а також платна 
підписка з обмеженнями за кількістю точок або кас. 
1С:Підприємство[2] 
Це одна з найпоширеніших систем у країнах пострадянського простору. 
Вона забезпечує широкий функціонал: облік товарів, бухгалтерію, зарплати, 
звітність тощо. Платформа є дуже гнучкою, але складною в освоєнні. Серед 
недоліків — застарілий інтерфейс, складність налаштування та високі витрати на 
впровадження й технічну підтримку. 
RetailCRM[3] 
RetailCRM орієнтована на інтернет-магазини та омніканальні продажі. 
Основна перевага — глибока інтеграція з e-commerce платформами, аналітика, 
маркетинг і автоматизація взаємодії з клієнтами. Проте вона не є повноцінною 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
11 
POS-системою, а більше CRM-системою з окремими модулями для роздрібної 
торгівлі. Не всім підходить як рішення «все в одному». 
Iiko[4] 
iiko — це спеціалізоване рішення для ресторанного бізнесу. Воно охоплює 
всі аспекти: від автоматизації замовлень до складського обліку, HR та логістики. 
Працює у хмарі та на локальних серверах. Сильними сторонами є гнучкість та 
глибокий функціонал для фуд-сервісу. Недолік — відносно висока вартість та 
складність впровадження. 
Square POS[5] 
Square POS — популярна система в США та інших країнах, орієнтована на 
малий бізнес. Вона проста у використанні, підтримує облік продажів, 
інвентаризацію, аналітику та інтеграцію з банківськими терміналами. Має хорошу 
підтримку мобільних платформ. Основним недоліком для нашого ринку є 
відсутність локалізації та прив’язка до платіжної системи Square, яка не 
підтримується в Україні. 
Lightspeed[6] 
Lightspeed — потужна POS-система, що підходить для рітейлу, готельного 
та ресторанного бізнесу. Підтримує хмарне зберігання, інвентаризацію, 
управління персоналом, CRM-функції. Сильна сторона — високий рівень 
кастомізації. Проте система є дороговартісною, і не всі функції адаптовані для 
невеликих бізнесів. 
Shopify POS[7] 
Shopify POS — розширення популярної e-commerce платформи Shopify. 
Ідеально підходить для бізнесів, які поєднують онлайн- та офлайн-продажі. Має 
зручний інтерфейс, синхронізується з онлайн-магазином. Однак, її використання 
можливе лише в екосистемі Shopify, що обмежує масштабування або інтеграцію з 
іншими рішеннями. 
Попри розмаїття функціоналу, більшість із них мають ряд недоліків: 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
12 
− висока вартість ліцензій або щомісячної абонплати, що є суттєвим 
фактором для малого бізнесу. 
− наявність зайвих функцій, які ускладнюють інтерфейс та створюють 
перевантаження для користувача. 
− недостатня гнучкість та адаптивність під конкретні потреби бізнесу, 
зокрема — обмежені можливості кастомізації. 
− прив’язаність до конкретної платформи або хмарного сервісу, що може 
викликати труднощі з перенесенням даних чи автономною роботою. 
− низька швидкодія на слабкому обладнанні, що актуально для невеликих 
торгових точок, які не мають ресурсів для оновлення техніки. 
− складність у налаштуванні та інтеграції з іншими системами 
підприємства. 
У зв’язку з цим виникає потреба у створенні гнучкої, зручної та економічно 
ефективної комп’ютерної системи управління мережею торгових точок, яка 
відповідатиме реальним потребам малого та середнього бізнесу,  забезпечуючи 
при цьому стабільність, швидкодію та легкість в обслуговуванні. Також важливо, 
щоб була доступна перспектива для розвитку системи на різних платформах: як у 
вигляді комп’ютерної програми, так і мобільного застосунку.  
1.3. Постановка задачі на розробку КС УМТТ 
Метою розробки є створення комп’ютерної системи, яка забезпечить 
ефективне управління мережею торгових точок, автоматизуючи основні бізнес
процеси: облік товарів, реєстрацію продажів, управління персоналом та 
формування звітності для аналітики. 
Основні задачі, які має вирішувати система: 
− реєстрація продажів із фіксацією дати, часу, товарних позицій, суми та 
відповідального працівника; 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
13 
− управління користувачами — створення облікових записів, призначення 
ролей (адміністратор, касир, менеджер), обмеження доступу до певних 
функцій; 
− ведення обліку персоналу, зберігання їхніх даних, посад і прив’язаних до 
них торгових точок; 
− облік товарів з функціями перегляду, додавання, редагування, 
категоризації та фільтрації; 
− отримання статистики та формування звітів у зручному для аналізу 
форматі (HTML, .XLSX), з можливістю фільтрації за товарами, 
періодами, працівниками тощо; 
− захист і цілісність даних — реалізація механізмів авторизації та 
розмежування прав доступу для запобігання несанкціонованим діям. 
− результатом проєкту має стати надійна та зручна у використанні 
комп’ютерна система, орієнтована на потреби малого та середнього 
бізнесу, що дозволить централізовано керувати мережею торгових точок, 
контролювати діяльність персоналу та приймати зважені управлінські 
рішення на основі звітів і аналітики. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
14 
2. 
ПРОЄКТУВАННЯ КОМП’ЮТЕРНОЇ СИСТЕМИ УПРАВЛІННЯ 
МЕРЕЖЕЮ ТОРГОВИХ ТОЧОК 
2.2. Основні вимоги до системи 
Комп’ютерна система управління мережею торгових точок повинна 
забезпечувати автоматизацію ключових бізнес-процесів, пов’язаних з торгівлею, 
обліком товарів, роботою персоналу та аналітикою діяльності. Для цього до 
системи висуваються як функціональні, так і нефункціональні вимоги. 
Функціональні вимоги: 
− облік товарів: додавання, редагування, видалення товарів, прив’язка до 
категорій, пошук та фільтрація; 
− управління продажами: фіксація операцій продажу з відображенням 
дати, часу, продавця, товарів та суми; 
− управління персоналом: додавання та редагування інформації про 
співробітників, призначення ролей (адміністратор, продавець тощо); 
− авторизація та контроль доступу: підтримка ролей користувачів із різним 
рівнем доступу; 
− статистика та звітність: формування звітів про продажі, товари, 
активність персоналу, експорт у форматах HTML або XLSX; 
− синхронізація з сервером: забезпечення коректної взаємодії між 
клієнтською частиною та сервером через API. 
Нефункціональні вимоги: 
− зручний графічний інтерфейс, адаптований під різні розміри екранів; 
− безпечне зберігання та передача даних; 
− можливість масштабування системи при збільшенні кількості точок 
продажу; 
− чітка документація коду, що забезпечує простоту супроводу та 
модифікації. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
15 
Розробка системи має ґрунтуватися на сучасних технологіях 
програмування, зокрема використанні C#, ASP.NET Core для серверної частини, 
.NET Windows Forms для клієнтського застосунку та PostgreSQL як СУБД. 
Система повинна бути адаптована для локального та мережевого використання у 
середовищах малого та середнього бізнесу. 
2.3. Архітектура комп’ютерної системи 
Архітектура комп’ютерної системи управління мережею торгових точок 
має модульну, багаторівневу структуру, що забезпечує розділення 
відповідальностей, гнучкість у розробці та легкість масштабування. Система 
реалізується за клієнт-серверною моделлю з чітким поділом на клієнтську, 
серверну та базову (даних) частини. 
Основні компоненти архітектури: 
1. Клієнтський застосунок (Front-end) 
Реалізується за допомогою фреймворку, що дозволяє створити 
кросплатформений інтерфейс користувача з підтримкою десктопних та мобільних 
платформ. Клієнт відповідає за взаємодію з користувачем, надсилання запитів до 
API та відображення отриманих даних. Клієнтський застосунок забезпечує 
представлення аналітики та звітності. В додаток вбудований механізм 
формування звітів, який дозволяє створювати HTML- та xlsx-звіти на основі даних 
з бази, забезпечуючи керівництво актуальною інформацією про стан продажів і 
діяльність торгових точок. 
2. Серверна частина (Back-end) 
Розробляється з використанням RESTful API[8], що обумовлюється 
використанням HTTP-запитів для взаємодії з ресурсами. Основні типи цих запитів 
відповідають операціям отримання, створення, оновлення та видалення даних. 
Сервер виконує бізнес-логіку, обробляє запити клієнта, перевіряє права доступу, 
виконує операції над базою даних та повертає результати. Також на сервер 
покладена відповідальність за виконання валідації даних, отриманих від 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
16 
користувачя. Уся взаємодія з клієнтом відбувається через HTTP-запити у форматі 
JSON. 
3. База даних (Data Layer) 
У системі використовується СУБД для надійного зберігання інформації про 
товари, продажі, працівників, користувачів та інші сутності. Робота з БД на 
сервері реалізована через ORM-технологію, що спрощує створення, оновлення та 
взаємодію з таблицями. Доступ до бази даних реалізований через API. 
Рисунок 2.1 – Схема взаємодії компонентів комп’ютерної системи 
На рисунку 2.1 зображено архітектуру[9] системи, яка реалізує тришаровий 
підхід: клієнт, сервер та база даних. Усі компоненти взаємодіють між собою через 
стандартизовані інтерфейси (REST API та ORM), що забезпечує масштабованість, 
модульність та гнучкість системи. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
17 
Рисунок 2.2 – Принципи роботи WEB-API 
На рисунку 2.2 зображено схему взаємодії RESTful API між клієнтом і 
сервером. У випадку комп’ютерної системи, розробленої  вданому проєкті, 
актуальнішим є Desktop App або Mobile App замість Web App, як позначено на 
схемі, проте API передбачає майбутню перспективу розробки і Web-додатку для 
доступу до системи через браузер.  
У системах з RESTful API, які обслуговують велику кількість клієнтів, 
асинхронність є критично важливою для забезпечення масштабованості, 
відповідності сучасним стандартам і ефективного використання ресурсів сервера. 
У зв’язку з тим, що система може обслуговувати одночасно декілька 
клієнтів (наприклад, різні торгові точки чи користувачів, які працюють із 
застосунком паралельно), серверна частина реалізована з використанням 
асинхронних контролерів. Це означає, що всі запити до REST API обробляються 
у неблокуючому режимі з використанням ключових слів async та await. Такий 
підхід дозволяє: 
− ефективно масштабувати систему при великій кількості запитів; 
− уникати блокування потоків виконання; 
− зменшити час відповіді сервера; 
− забезпечити кращу продуктивність при роботі з базою даних через ORM. 
Завдяки асинхронності система залишається стабільною і швидкодійною 
навіть при високому навантаженні, гарантуючи, що кожен клієнт отримає 
відповідь без затримок. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
18 
Рисунок 2.3 – Схема доступу багатьох клієнтів до бази даних 
На рисунку 2.3 зображено схему доступу багатьох клієнтів до одного 
серверу одночасно. Саме за цим принципом працюють всі сучасні системи 
подібного типу.  
2.4. Проєктування бази даних 
У системі управління мережею торгових точок використовується реляційна 
база даних, спроєктована відповідно до вимог нормалізації даних, модульності та 
розширюваності. Всі таблиці пов’язані між собою через зовнішні ключі, що 
забезпечує цілісність і узгодженість даних. Опис сутностей та їх атрибутів 
наведено в таблиці 2.1. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
19 
 
 
ІАЛЦ.045440.003 ПЗ 
ПЗ 20 
Лис
 т 
Дата Підп. № докум. Лист Зм 
Таблиця 2.1 – Опис структури бази даних "Retail-Outlet-Network" 
Відношення Атрибут Тип атрибуту 
Stores - містить 
інформацію про всі 
торгові точки мережі. 
StoreID – унікальний 
ідентифікатор торгової точки. 
StoreName – назва магазину. 
Address – адреса 
розташування. 
CreatedAt – дата й час 
створення торгової точки. 
uuid (унікальний 
ідентифікатор) 
text (текст) 
text (текст) 
 
datetime (дата й 
час) 
Users - зберігає дані про 
зареєстрованих 
користувачів системи 
(адміністратори, касири 
тощо). Паролі 
зберігаються у вигляді 
хешу з міркувань 
безпеки. Ролі винесено в 
окрему таблицю для 
гнучкості управління 
доступом. 
UserID – унікальний 
ідентифікатор користувача 
UserFullName – повне ім’я 
користувача. 
UserName – логін для входу. 
PasswordHash – хешований 
пароль. 
RoleID – зовнішній ключ на 
таблицю Roles. 
uuid (унікальний 
ідентифікатор) 
text (текст) 
 
text (текст) 
text (текст) 
 
uuid (унікальний 
ідентифікатор) 
Roles – забезпечує 
розмежування доступу 
до функціоналу системи. 
Замість дублювання 
текстових значень у 
таблиці Users, 
використовується 
зовнішній ключ. 
RoleID – унікальний 
ідентифікатор ролі. 
RoleName – назва ролі 
(наприклад, "admin", "cashier"). 
uuid (унікальний 
ідентифікатор) 
text (текст) 
 
Categories –  організація 
товарів за категоріями 
(наприклад, "Напої", 
"Молочні продукти", 
"Побутова хімія"). Це 
дає змогу фільтрувати та 
структурувати товари. 
CategoryID – унікальний 
ідентифікатор категорії. 
CategoryName) – назва 
категорії товарів. 
 
uuid (унікальний 
ідентифікатор) 
text (текст) 
 
Products –  містить 
повну інформацію про 
всі товари. Тип Double  
використано для точної 
ProductID – унікальний 
ідентифікатор товару. 
ProductName – назва товару. 
CategoryID – зовнішній ключ 
uuid (унікальний 
ідентифікатор) 
text (текст) 
uuid (унікальний 
 
 
ІАЛЦ.045440.003 ПЗ 
ПЗ 21 
Лис
 т 
Дата Підп. № докум. Лист Зм 
роботи з десятковими 
значеннями цін. 
Зовнішній ключ 
CategoryID забезпечує 
логічну класифікацію 
товарів. 
на Categories. 
Price – ціна товару 
 
SKU – артикул/штрихкод. 
CreatedAt – дата додавання 
товару. 
ідентифікатор) 
double (дробове 
число) 
text (текст) 
datetime (дата й 
час) 
Inventory – зберігає 
інформацію про залишки 
товарів у конкретній 
торговій точці. Спільне 
використання StoreID і 
ProductID дозволяє 
контролювати запаси по 
кожному магазину. 
InventoryID – унікальний 
ідентифікатор ролі. 
StoreID –  зовнішній ключ на 
Stores. 
ProductID –  зовнішній ключ 
на Products. 
Quantity –  кількість товару в 
наявності. 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
integer 
(числовий)        
 
Sales – таблиця фіксує 
всі транзакції продажу. 
Додаткові поля 
забезпечують історію 
операцій і аналітику. 
 
SaleID – унікальний 
ідентифікатор продажу. 
StoreID – магазин, у якому 
здійснено продаж. 
UserID – користувач, який 
оформив продаж. 
Total – загальна сума покупки. 
 
CreatedAt – дата та час 
продажу. 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
double (дробове 
число) 
datetime (дата й 
час) 
SaleProducts – деталізує 
продаж – які саме товари 
були продані, в якій 
кількості та за якою 
ціною. Це дозволяє 
формувати аналітику та 
звіти. 
SaleProductID – унікальний 
ідентифікатор запису. 
SaleID – зовнішній ключ на 
Sales. 
ProductID – товар, що був 
проданий. 
Quantity – кількість одиниць 
товару. 
Price – ціна на момент 
продажу. 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
integer 
(числовий)        
double (дробове 
число) 
 
Загальні принципи проєктування: 
− типи даних uuid[10] обрано для унікальності та захисту від зіткнень при 
розподіленому доступі. 
− text застосовується там, де немає обмеження на довжину або потрібно 
зберігати довільний рядок. 
− double precision дозволяє уникати помилок округлення при грошових 
операціях (у майбутньому можна замінити на numeric(10, 2) для кращої 
точності). 
− використання зовнішніх ключів гарантує цілісність даних. 
Таким чином, спроєктована база даних є логічною, масштабованою та 
повністю відповідає завданням автоматизації управління мережею торгових 
точок. 
Після проєктування структури бази даних важливо перевірити її на 
відповідність нормальним формам[11], що дозволяють мінімізувати надмірність 
даних, уникнути логічних помилок та забезпечити коректність операцій над 
таблицями. Для цього проаналізуємо, чи відповідає створена база даних основним 
нормальним формам — від першої до третьої. 
1. 1НФ — Перша нормальна форма 
Виконується для всіх таблиць, бо: 
− кожна колонка містить атомарне значення (немає списків або масивів). 
− значення мають однаковий тип у кожному стовпці. 
− є унікальні первинні ключі (uuid), які однозначно ідентифікують кожен 
рядок. 
2.  2НФ — Друга нормальна форма 
Виконується, оскільки: 
− у таблицях немає складених первинних ключів, тобто всі ключі — uuid, 
які самі по собі є повним ключем. 
− жоден неключовий атрибут не залежить тільки від частини ключа, тому 
часткова залежність виключена. 
3. 3НФ — Третя нормальна форма 
Виконується, тому що: 
− усі неключові поля залежать безпосередньо від первинного ключа. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
22 
− наприклад, у таблиці Products, ProductName, Price, SKU — усі прямо 
залежать від ProductID. 
− у Users, UserName, UserFullName, PasswordHash залежать від 
UserID.Поля типу RoleID, CategoryID, StoreID — зовнішні ключі, і 
логічно відокремлені в окремі таблиці (Roles, Categories, Stores) — немає 
транзитивних залежностей. 
Рисунок 2.4 – Схема бази даних 
2.5. Проєктування інтерфейсів користувача 
Інтерфейс користувача відіграє ключову роль у забезпеченні ефективної 
взаємодії між користувачем і комп’ютерною системою управління мережею 
торгових точок. У проєктованій системі було прийнято рішення реалізувати 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
23 
інтерфейс за допомогою фреймворку .NET Windows Forms, що дозволяє 
створювати Desktop застосунки для операційної системи Windows. 
Основні вимоги до інтерфейсу: 
1. Інтуїтивно зрозуміле розташування елементів; 
2. Адаптивність до різних розмірів екранів; 
3. Чіткий поділ на функціональні блоки; 
4. Доступ до основних функцій у декілька кліків; 
5. Відповідність ролям користувачів (адміністратор, касир, менеджер 
тощо). 
Основні екрани застосунку: 
1. Головне меню – стартовий екран після авторизації, що містить доступ до 
основних модулів системи (продажі, товари, працівники, аналітика, звіти 
тощо). 
2. Сторінка продажів – дозволяє касиру швидко здійснювати продажі, 
обирати товари зі списку або через пошук/сканер, обробляти оплату. 
3. Каталог товарів – дає змогу переглядати список товарів, додавати нові 
позиції, редагувати або видаляти наявні. 
4. Керування категоріями – забезпечує організацію товарів за категоріями 
для зручності навігації та звітності. 
5. Список користувачів і ролей – використовується адміністратором для 
створення, редагування, призначення ролей і контролю доступу. 
6. Аналітика та звіти – дозволяє формувати динамічні таблиці й графіки, 
експортувати інформацію у форматах HTML або XLSX. 
7. Форма авторизації – екран входу в систему з перевіркою облікових даних 
користувача. 
Для покращення UX/UI були враховані загальноприйняті принципи 
дизайну: логічне групування елементів, використання іконок, контрастної палітри 
кольорів, а також мінімізація кількості кроків для виконання рутинних операцій. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
24 
Важливо, що вся взаємодія з даними відбувається через API, що дозволяє 
зберігати інтерфейс максимально швидким і динамічним. Крім того, інтерфейс 
підтримує обробку повідомлень про помилки, підтвердження дій та відображення 
стану операцій (наприклад, спінер при завантаженні або повідомлення про 
успішну зміну даних). 
2.6. Вибір технологій реалізації 
На етапі розробки комп’ютерної системи управління мережею торгових 
точок було обрано сучасний стек технологій, який забезпечує продуктивність, 
масштабованість та зручність у розробці. 
2.6.1. Вибір мови програмування та фреймворків 
Основною мовою програмування в проєкті обрано C#[12]. Це сучасна мова, 
яка поєднує об’єктно-орієнтований підхід, високу продуктивність та зручний 
синтаксис. Вона активно підтримується корпорацією Microsoft та має широку 
екосистему бібліотек, що робить її ідеальним вибором для розробки як 
клієнтської, так і серверної частини системи. 
2.6.2.  Вибір СУБД 
Як систему управління базами даних було обрано PostgreSQL[13] — одну з 
найпопулярніших реляційних СУБД з відкритим кодом. Причини такого вибору: 
− підтримка складних запитів і транзакцій; 
− високий рівень відповідності стандарту SQL; 
− розширюваність (можливість створювати власні типи, функції тощо); 
− стабільна робота при великих обсягах даних; 
− добра інтеграція з .NET через Entity Framework Core та Npgsql
провайдер. 
PostgreSQL є оптимальним рішенням для систем, де важливі цілісність, 
надійність та масштабованість даних. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
25 
2.6.3. Вибір інструментів створення клієнтського додатку 
Для створення клієнтського застосунку було обрано Windows Forms 
(WinForms)[14] — один із найпопулярніших фреймворків для створення 
настільних застосунків під Windows. Його переваги: 
− простота розробки — інтуїтивно зрозумілий підхід до побудови 
інтерфейсів за допомогою drag-and-drop редактора; 
− швидка побудова UI — підтримка візуального дизайнера у середовищі 
Visual Studio дозволяє швидко створювати інтерфейси. Ця властивість 
буде корисною в разі потреби оновлення додатку або розширення 
функціоналу. 
− широка підтримка елементів управління — вбудовані компоненти, такі 
як DataGridView, TextBox, ComboBox, дозволяють реалізувати 
функціональний інтерфейс без додаткових бібліотек; 
− глибока інтеграція з Windows — фреймворк дозволяє легко взаємодіяти 
з файлами, реєстром, системними діалогами тощо; 
− стабільність і перевіреність часом — WinForms використовується в 
промислових рішеннях десятиліттями та добре себе зарекомендував. 
2.6.4. Вибір технологій створення серверної частини 
Серверна частина реалізована на базі ASP.NET Core[15], сучасного 
фреймворку для створення вебзастосунків і API. Його головні переваги — 
модульна архітектура, висока продуктивність, підтримка асинхронного 
програмування, кросплатформеність і зручна інтеграція з базами. Для розробки 
додатку використані технології:  
− RESTful API — для забезпечення структурованого обміну даними між 
клієнтом і сервером через HTTP-запити (GET, POST, PUT, DELETE); 
− Entity Framework Core (EF Core) — ORM для роботи з базою даних, що 
дозволяє працювати з об'єктами, а не з SQL-запитами напряму; 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
26 
− Npgsql — офіційний .NET-драйвер для PostgreSQL; 
Також у серверній частині передбачена асинхронна обробка запитів, що 
дозволяє ефективно обробляти одночасні звернення від кількох клієнтів без 
блокування основного потоку. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
27 
3. 
РЕАЛІЗАЦІЯ КОМП’ЮТЕРНОЇ СИСТЕМИ УПРАВЛІННЯ   
МЕРЕЖЕЮ ТОРГОВИХ ТОЧОК 
3.2. Реалізація серверної частини засобами ASP.NET 
Серверна частина програмного комплексу реалізована у вигляді 
вебзастосунку на базі ASP.NET Core Web API, що забезпечує зручний та 
ефективний спосіб обміну даними між клієнтською частиною та базою даних. 
Розробка велась у середовищі Visual Studio, а структура рішення відображає 
розділення відповідальностей за принципами чистої архітектури. На рисунку 3.1 
зображено структуру проєкту серверної частини. Назвою серверного додатку є 
RON.WebAPI, де RON означає Retail Outlet Network – мережа торгових точок. 
Рисунок 3.1 – Структура проєкту серверної частини RON.WebAPI у Visual Studio 
Основними складовими структури є Controllers, DatabaseContext, Migrations, 
Models, Services, appsettings.json та Program.cs. 
Controllers — каталог, що містить API-контролери, які обробляють HTTP
запити від клієнта. Кожен контролер відповідає за певну сутність (наприклад, 
ProductsController, UsersController) і реалізує відповідні методи для роботи з нею 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
28 
(Get, Post, Put, Delete). На рисунку 3.2 зображено перелік всіх контролерів, що 
використовуються в даному проєкті. Кожен контролер пов’язаний із окремою 
таблицею в базі даних. 
Рисунок 3.2 – Перелік всіх передбачених контролерів 
DatabaseContext — містить клас контексту бази даних (зазвичай 
ApplicatonDbContext), який є головною точкою взаємодії з базою через ORM 
Entity Framework Core. Тут визначено DbSet-и для кожної таблиці та методи 
конфігурації моделі. DbSet представляє собою набір сутностей певного типу, з 
якими можна працювати в контексті бази даних. Він дозволяє виконувати запити 
до таблиць, а також додавати, змінювати або видаляти записи. Об’єкти DbSet 
оголошуються у класі DbContext для кожної сутності, яку потрібно зберігати в базі 
даних. На рисунку 3.3 зображено складову  DatabaseContext. 
Рисунок 3.3 – Складова API DatabaseContext 
Migrations — каталог, що містить міграції бази даних. Міграції — це 
інструмент, який дає змогу керовано змінювати структуру бази даних відповідно 
до змін у коді програми. Вони дозволяють створювати таблиці, змінювати стовпці, 
ключі та інші об’єкти БД. Також їхня користь проявляється у випадку 
використання ORM, наприклад Entity Framework у C#. Завдяки міграціям можна: 
− формувати структуру бази даних безпосередньо з коду (підхід code first), 
− вносити зміни до схеми бази без втрати існуючих даних, 
− підтримувати відповідність між моделями в коді та реальною базою 
даних. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
29 
Файл міграції — це спеціальний програмний файл, який містить інструкції 
для зміни структури бази даних. Його створює на основі змін у моделях (класах). 
На рисунку 3.4 зображено перелік всіх файлів міграцій, створених у проєкті. 
Назви цих файлів складаються з мітки часу та імені міграції, яке розробник (або 
Visual Studio) задає при створенні. 
Рисунок 3.4 – Перелік файлів міграцій. 
Models — містить опис сутностей (класи, що відображають таблиці в базі 
даних). Наприклад, Product, User, Store, кожна з яких відповідає відповідному 
набору полів у таблиці. На рисунку 3.5 зображено перелік всіх задіяних класів 
моделей. 
Рисунок 3.5 – Перелік класів моделей. 
Services — реалізує бізнес-логіку системи. Сервіси виконують валідацію та 
обробку даних, взаємодію з базою даних, перевірку умов, обчислення тощо. На 
рисунку 3.6 зображено перелік класів сервісів, що були розроблені під час 
виконання роботи.  
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
30 
Рисунок 3.6 – Перелік класів сервісів. 
ServicesContracts — інтерфейси до сервісів. Вони визначають контракти 
(угоди), які реалізуються в папці Services, що дозволяє легко змінювати 
реалізацію. Інтерфейси у високорівневих мовах програмування визначають, які 
методи та властивості повинні мати класи, що реалізують цей інтерфейс. Таким 
чином, вони забезпечують гнучкість та повторне використання коду, дозволяючи 
різним класам взаємодіяти через загальний стандарт. На рисунку 3.7 зображено 
перелік всіх необхідних інтерфейсів сервісів. 
Рисунок 3.7 – Перелік інтерфейсів сервісів. 
appsettings.json — файл конфігурації застосунку. Тут зберігаються 
параметри підключення до бази даних, конфігурації логування, шляхи до ресурсів 
тощо. На рисунку 3.8 зображено складову  appsettings.json. 
Рисунок 3.8 – Компонент appsettings.json. 
Program.cs — головний вхідний файл застосунку, в якому налаштовується 
запуск вебсервера, реєструються сервіси в контейнері залежностей, додаються 
middleware-компоненти. Контейнер залежностей (Dependency Injection container) 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
31 
 
 
ІАЛЦ.045440.003 ПЗ 
ПЗ 32 
Лис
 т 
Дата Підп. № докум. Лист Зм 
у Program.cs — це центральне місце, де реєструються сервіси і об'єкти, які потім 
використовуються в різних частинах програми (наприклад, у контролерах, 
формах, сервісах тощо). Middleware-компоненти — це проміжні програмні 
модулі, які виконуються послідовно під час обробки HTTP-запиту в ASP.NET 
Core. Вони можуть обробляти запити (наприклад, перевірка авторизації), 
змінювати запити чи відповіді, вирішувати, чи передавати запит далі по 
ланцюжку. 
3.1.2. Реалізація контролерів та обробка запитів 
Перед розглядом контролерів необхідно зрозуміти логіку побудови 
моделей, на основі яких і працює серверна частина. Усі моделі в системі 
репрезентовані в таблиці 3.1 і відповідають за структуру даних, які обробляються. 
Таблиця 3.1 – Опис моделей додатку " RON.WebAPI " 
Клас моделі Поля (властивості) Тип поля 
Category — модель для 
категорій товарів. 
 
CategoryID — унікальний 
ідентифікатор категорії. 
CategoryName — назва 
категорії (наприклад, "Напої", 
"Овочі"). 
Guid (унікальний 
ідентифікатор) 
string (текст) 
Inventory — облік 
товарів у магазині. 
InventoryID — унікальний 
ідентифікатор запису. 
StoreID — зовнішній ключ, 
що посилається на магазин. 
ProductID — зовнішній 
ключ, що посилається на 
товар. 
Quantity — кількість 
одиниць даного товару в 
магазині. 
Store — навігаційна 
властивість до магазину. 
Product — навігаційна 
властивість до товару. 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
 
int (ціле число) 
 
 
Store (об’єкт 
класу Store) 
Product (об’єкт 
класу Product) 
Product — описує товар 
у системі. 
ProductID — унікальний 
ідентифікатор товару. 
ProductName — назва 
uuid (унікальний 
ідентифікатор) 
string (текст) 
 
 
ІАЛЦ.045440.003 ПЗ 
ПЗ 33 
Лис
 т 
Дата Підп. № докум. Лист Зм 
 товару. 
CategoryID — зовнішній 
ключ до категорії. 
Price — ціна товару. 
 
SKU — артикул (унікальний 
код для товару). 
CreatedAt — дата створення 
товару. 
Category — навігаційна 
властивість до категорії. 
 
uuid (унікальний 
ідентифікатор) 
double (дійсне 
число) 
string (текст) 
 
DateTime (дата та 
час) 
Category (об’єкт 
класу Category) 
Role — ролі 
користувачів. 
RoleID — унікальний 
ідентифікатор ролі. 
RoleName — назва ролі 
(наприклад, "Адміністратор", 
"Касир"). 
Guid (унікальний 
ідентифікатор) 
string (текст) 
Sale — інформація про 
здійснений продаж. 
 
SaleID — унікальний 
ідентифікатор продажу. 
StoreID — зовнішній ключ до 
магазину. 
UserID — зовнішній ключ до 
користувача, який здійснив 
продаж. 
Total — загальна сума 
продажу. 
CreatedAt — дата продажу. 
 
Store — навігаційна 
властивість до магазину. 
User — навігаційна 
властивість до користувача. 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
 
double (дійсне 
число) 
DateTime (дата та 
час) 
Store (об’єкт 
класу Store) 
User (об’єкт 
класу User) 
SaleProduct — товари, 
що входять до 
конкретного продажу. 
 
SaleProductID — унікальний 
ідентифікатор. 
SaleID — зовнішній ключ до 
продажу. 
ProductID — зовнішній ключ 
до товару. 
Quantity — кількість 
одиниць товару в продажі. 
Price — ціна на момент 
продажу. 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
uuid (унікальний 
ідентифікатор) 
int (ціле число) 
 
double (дійсне 
число) 
 
 
ІАЛЦ.045440.003 ПЗ 
ПЗ 34 
Лис
 т 
Дата Підп. № докум. Лист Зм 
Sale — навігаційна 
властивість до продажу. 
Product — навігаційна 
властивість до товару. 
Sale (об’єкт класу 
Sale) 
Product (об’єкт 
класу Product) 
Store — магазини 
мережі. 
 
StoreID — унікальний 
ідентифікатор магазину. 
StoreName — назва 
магазину. 
Address — адреса магазину. 
CreatedAt — дата створення 
магазину. 
uuid (унікальний 
ідентифікатор) 
string (текст) 
 
string (текст) 
DateTime (дата та 
час) 
User — користувачі 
системи. 
 
UserID — унікальний 
ідентифікатор користувача. 
UserFullName — повне ім’я 
користувача. 
UserName — логін. 
PasswordHash — 
захешований пароль. 
RoleID — зовнішній ключ до 
ролі. 
Role — навігаційна 
властивість до ролі. 
uuid (унікальний 
ідентифікатор) 
string (текст) 
 
string (текст) 
string (текст) 
 
uuid (унікальний 
ідентифікатор) 
Role (об’єкт класу 
Role) 
Після створення класів моделей можна перейти до реалізації сервісів та 
контролерів. Для реалізації контролеру необхідно використання певних атрибутів 
для позначення методів класу.  Атрибут у C# — це спеціальний тип метаданих, 
який додається до класів, методів, властивостей, параметрів або інших елементів 
програми для впливу на їх поведінку або для надання додаткової інформації. У 
контексті ASP.NET Core Web API атрибути широко використовуються для 
налаштування маршрутів, контролю доступу, валідації даних тощо. Основні 
атрибути, використані у контролерах цього проєкту: 
− [Route("api/[controller]")] визначає шаблон маршруту для всіх методів 
контролера. 
− "[controller]" є плейсхолдером, який автоматично підставляє назву 
контролера без суфікса "Controller". Наприклад, для CategoriesController 
шлях буде api/categories. 
− [ApiController] позначає клас як API-контролер. Цей атрибут 
автоматично забезпечує перевірку вхідних моделей (ModelState), 
спрощує обробку HTTP-запитів, дозволяє використовувати атрибути 
маршрутизації без додаткової конфігурації, генерує відповіді 400 Bad 
Request, якщо модель невалідна. 
− [HttpGet] визначає, що метод обробляє GET-запити. Застосовується для 
отримання списків або окремих об'єктів з сервера. 
− [HttpGet("{id}")] визначає GET-запит із параметром id. Наприклад, GET 
/api/categories/5 — повертає категорію з вказаним ідентифікатором. 
− [HttpPost] визначає, що метод обробляє POST-запити, які зазвичай 
використовуються для створення нових об'єктів у базі даних. 
Приклад реалізації контролера для роботи з сутністю Category наведено на 
рисунку 3.9. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
35 
Рисунок 3.9 – Периклад реалізації класу CategoriesController.cs. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
36 
З прикладу видно, що контролери працюють як endpoits для запитів. Контролер 
звертається до сервісу, передаючи дані для обробки, валідації та передання в 
базу даних, або ж навпаки задля отримання даних від сервісу.  
3.1.3. Реалізація доступу до бази даних засобами EF Core 
Entity Framework Core (EF Core) — це сучасний об’єктно-реляційний 
диспетчер (ORM) з відкритим вихідним кодом, розроблений компанією Microsoft. 
Він дозволяє .NET-розробникам працювати з базами даних, використовуючи 
об'єктно-орієнтований підхід замість прямого написання SQL-запитів. EF Core 
автоматично перетворює операції над об'єктами у відповідні SQL-запити до бази 
даних. 
У використанні EF Core є вагома кількість переваг: 
− зменшення кількості коду. Замість великої кількості SQL-запитів 
розробник працює з об’єктами та колекціями. CRUD-операції 
(створення, читання, оновлення, видалення) реалізуються просто і 
зрозуміло. 
− підвищення читабельності та підтримуваності коду. Операції з базою 
даних виглядають як звичайні виклики методів, що полегшує супровід і 
розширення коду. 
− безпечна робота з параметрами (захист від SQL-ін’єкцій). EF Core 
автоматично 
захищає 
параметризовані запити. 
від 
SQL-ін’єкцій, 
використовуючи 
− підтримка міграцій. EF Core дозволяє керувати схемою бази даних 
безпосередньо з коду. Зміни у моделях зручно переносити в базу даних 
за допомогою механізму міграцій. 
− кросплатформеність. EF Core підтримує роботу з різними СУБД (SQL 
Server, PostgreSQL, MySQL тощо) і може використовуватись у будь-яких 
.NET-застосунках, включно з десктопними, веб та мобільними. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
37 
Хоча використання прямих SQL-запитів (через ADO.NET або Dapper) є 
гнучким і може забезпечити дещо вищу продуктивність в окремих випадках, 
такий підхід має ряд недоліків: 
− більша кількість шаблонного коду; 
− вища ймовірність помилок при ручному формуванні запитів; 
− складніше оновлювати та змінювати структуру таблиць; 
− немає автоматичного відображення зв’язків між таблицями; 
− більша складність у тестуванні та розширенні системи. 
EF Core, натомість, дозволяє працювати з об’єктами, а не з таблицями 
напряму. Також обумовлена можливість зручно описувати зв’язки між 
сутностями (наприклад, один-до-багатьох або багато-до-багатьох), не думаючи 
про дрібниці, як-от відкриття/закриття з’єднань, ручну обробку результатів 
запитів тощо. Додатково можна відмітити легкість масштабувати коду, оскільки 
логіка не прив’язана до конкретної СУБД. 
У підсумку можна зазначити, що застосування EF Core у проєкті дозволяє 
реалізувати надійний, чистий та ефективний доступ до бази даних з мінімальними 
витратами часу. Незважаючи на те, що пряме використання SQL могло б 
забезпечити більше контролю над виконанням запитів, у більшості випадків EF 
Core є кращим вибором, особливо на етапах активної розробки та підтримки 
системи. 
Реалізацію доступу до бази даних можна описати на прикладі коду одного з 
реалізованих сервісів. На рисунку 3.10 зображено конструктор, методи 
AddProduct(), DeleteProduct(), GetProduct(id) та GetProduct() з класу сервісу 
ProductsService. Представлено реалізацію чотирьох методів класу, наведено 
приклади алгоритмів валідації даних. Методи реалізують додавання, видалення та 
отримання продуктів відповідно. В коментарях покроково описані дії. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
38 
Рисунок 3.10 – Конструктор, AddProduct(), DeleteProduct(), GetProduct(id) та 
GetProduct() з класу сервісу ProductsService.cs. 
Під 
час 
розробки коду було підключено простір імен 
Microsoft.EntityFrameworkCore. Саме цей простір відповідає за ORM. Властивість 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
39 
класу _context містить в собі колекції об’єктів, які в свою чергу містять дані з 
таблиць бази даних. У коді продемонстровано можливість звертатись до таблиць 
як до звичайних типізованих колекцій мови C#, а також застосовувати стандартні 
функції для роботи з колекціями (List<T>), такі як Add(), Remove(), 
FirstOrDefaultAsync(), Include() та ToListAsync().   
У мові програмування C#, List<T> — це динамічна колекція, яка дозволяє 
зберігати об'єкти у вигляді списку. На відміну від масивів, які мають фіксовану 
довжину, список може змінювати свій розмір під час виконання програми. Одним 
із основних методів цього класу є Add(). Цей метод додає елемент до кінця списку 
List<T>. 
Метод Remove() використовується для видалення певного елемента з 
колекції, зокрема зі списку (List<T>). Він шукає заданий об'єкт у колекції і, якщо 
знаходить його, видаляє. Повертає булеве значення, яке вказує, чи було видалення 
успішним. 
Метод FirstOrDefaultAsync() використовується в Entity Framework Core для 
асинхронного отримання першого елемента з колекції, що відповідає умові (якщо 
така задана). Якщо жоден елемент не знайдено, повертає значення за 
замовчуванням (наприклад, null для класів). Працює асинхронно, тому не блокує 
потік виконання. 
Метод Include() використовується в EF Core для жадного завантаження 
пов’язаних даних. Дозволяє явно вказати, які пов'язані сутності (через зовнішні 
ключі) потрібно завантажити разом із головною сутністю. Це зручно для 
уникнення додаткових запитів до бази даних. 
Метод ToListAsync() перетворює результат запиту LINQ у Entity Framework 
Core на асинхронний список (List<T>). Завантажує усі елементи з бази даних у 
список і повертає його, не блокуючи основний потік завдяки асинхронності. 
На рисунку 3.11 представлено методи UpdateProduct() та ProductExists(), які 
створені для оновлення та перевірки існування продукту відповідно.  
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
40 
Рисунок 3.11 – Методи UpdateProduct() та ProductExists() з класу сервісу 
ProductsService.cs. 
3.2. Реалізація клієнтського застосунку засобами .NET WinForms 
3.2.1. Головне меню та структура інтерфейсу 
Windows Forms (WinForms) надає набір стандартних графічних елементів 
керування (control elements), які використовуються для створення зручного і 
функціонального інтерфейсу користувача. Нижче наведено основні з них: 
1. Form (Форма).  
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
41 
− основне вікно застосунку або окреме вікно в межах програми. Може 
містити інші елементи інтерфейсу. 
− Має властивості для налаштування зовнішнього вигляду, розміру, 
заголовку тощо. 
2. Label 
− відображає текстову інформацію. 
− використовується для підписів до полів, заголовків, пояснень. 
3. TextBox 
− поле для введення тексту користувачем. 
− часто використовується для введення логіну, назви товару, кількості 
тощо. 
4. Button 
− кнопка, яка викликає певну дію при натисканні (наприклад, 
"Зберегти", "Додати", "Видалити"). 
− обробка відбувається через подію Click. 
5. ComboBox 
− випадний список, з якого можна вибрати одне значення. 
− зручно використовувати для вибору категорії, магазину тощо. 
6. CheckBox 
− елемент для вибору або зняття вибору (галочка). 
− дає змогу вибирати кілька параметрів одночасно. 
7. RadioButton 
− схожий на CheckBox, але дозволяє вибрати лише один варіант із 
групи. 
8. DataGridView 
− таблиця для відображення та редагування колекцій даних 
(наприклад, списку товарів, користувачів, продажів). 
− підтримує пагінацію, сортування, вибір рядків, редагування 
клітинок. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
42 
9. MenuStrip / ToolStrip 
− MenuStrip: панель меню у верхній частині форми (Файл, Довідка, 
Налаштування тощо). 
− ToolStrip: панель із кнопками (іконками) для швидкого доступу до 
основних функцій (як у Word або Excel). 
10.  Panel / GroupBox 
− Panel: контейнер для групування елементів. 
− GroupBox: схожий на Panel, але має заголовок. Зручно об'єднувати 
пов’язані елементи. 
11. Timer 
− компонент для створення подій через певні проміжки часу 
(наприклад, автоматичне оновлення даних). 
12. PictureBox 
− використовується для відображення зображень. 
Дані компоненти можна перетягувати на форму за допомогою візуального 
конструктора у Visual Studio або створювати вручну в коді. Їхня взаємодія 
організовується через події, наприклад Click, TextChanged, SelectedIndexChanged 
тощо. Всі елементи було додано на форму за допомогою візуального 
конструктора. 
В даній роботі інтерфейс складається з наступних компонентів: Form, 
MenuStrip / ToolStrip, TextBox, ComboBox, Button, Label, DataGridView та 
PictureBox. До кожного елементу прив’язані певні події.  
При натисканні на будь-який елемент MenuStrip на основній формі 
відображається DataGridView, в якому відображаються дані, відповідно до пункту 
меню. В цей же час у всіх кнопок, міток, текстбоксів та інших елементів, що не 
стосуються цього пункту меню, змінюється властивість visible на false – тобто всі 
ці елементи перестають відображатись на основній формі. Приклад функції, яка 
відображає всі необхідні компоненти для роботи зі списком продуктів після 
натискання на пункт меню Products наведено на рисунку 3.12.  
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
43 
Рисунок 3.12 – Функція активації необхідних компонентів для роботи зі списком 
продуктів. 
Всього доступно 7 пунктів меню:  
1. Stores – забезпечує активацію графічних елементів для подачі списку 
торгових точок. Також надає можливість провести CRUD операції до 
кожного магазину, а також переглянути інвентар або продажі обраної 
торгової точки. 
2. Operations – активує показ списку проведених операцій. Також надає 
можливість провести CRUD операції.  
3. Products – представляє список продуктів, дає доступ до CRUD операцій. 
4. Categories – надає доступ до операцій над доступними категоріями 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
44 
продуктів. 
5. Reports – надає доступ до кнопок, які дозволяють завантажити звіти у 
форматі HTML або XLSX. Передбачена можливість експортувати 
табличні даних категорій, продуктів, магазинів та повної інформації про 
всі операції продажів. Також після натискання на пункт меню Reports 
виводяться основні дані про систему: кількість категорій, продуктів, 
магазинів, користувачів та здійснених операцій.  
6. Roles – представляє список ролей користувачів, дає доступ до CRUD 
операцій 
7. Users – відображає список користувачів, дає можливість проводити дії 
над персональними даними робочого персоналу. 
3.2.2. Робота з API 
У клієнтській частині програми, розробленій з використанням Windows 
Forms, зв’язок із серверною частиною (яка побудована на ASP.NET Core) 
здійснюється через веб API. Для цього застосовується клас HttpClient, який 
дозволяє надсилати HTTP-запити до серверу і обробляти відповіді. 
Для зручності й повторного використання запитів створюються окремі 
класи-репозиторії, наприклад, CategoryRepository, які інкапсулюють логіку 
взаємодії з API. Ці класи виконують такі завдання: 
1. Надсилання HTTP-запитів. 
Кожен метод репозиторію відповідає певному типу запиту до API: 
− GetAsync() — отримання даних (GET) 
− PostAsync() — створення нових записів (POST) 
− PutAsync() — оновлення існуючих записів (PUT) 
− DeleteAsync() — видалення записів (DELETE) 
2. Серіалізація / десеріалізація. 
Дані, які надсилаються на сервер, перетворюються у формат JSON за 
допомогою JsonSerializer.Serialize(). Отримані від сервера відповіді у 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
45 
вигляді JSON-рядків конвертуються назад у об'єкти моделі через 
JsonSerializer.Deserialize(). 
На рисунку 3.13 зображено приклад коду класу-репозиторію 
CategoryRepository. 
Рисунок 3.13 – Приклад коду класу-репозиторію CategoryRepository. 
Клас CategoryRepository у проєкті відповідає за взаємодію з API для роботи 
з категоріями. Він використовує об’єкт HttpClient для надсилання HTTP-запитів 
до серверної частини застосунку. У класі реалізовано методи для отримання 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
46 
списку категорій, створення нової, оновлення наявної та видалення існуючої 
категорії. Всі ці методи працюють асинхронно, що дозволяє не блокувати 
основний потік виконання програми. Дані передаються у форматі JSON: перед 
відправленням вони серіалізуються, а після отримання — десеріалізуються. Таким 
чином, CategoryRepository забезпечує зручний спосіб обміну даними між 
клієнтською частиною (інтерфейсом користувача) та API. За аналогією 
розроблено ще 7 інших репозиторіїв: InventoryRepository(), ProductRepository(), 
RoleRepository(), SaleProductRepository(), SalesRepository() та StoreRepository(), 
UsersRepository(). 
Програма звертається до подібних класів кожний раз, коли потрібно 
отримати дані з БД або відправити нові. Використання класу репозиторію має 
низку переваг, головною з яких є відокремлення логіки доступу до даних від іншої 
частини програми. Це забезпечує кращу структурованість, читабельність та 
підтримуваність коду. Репозиторій інкапсулює всі запити до API, що дозволяє 
централізовано змінювати логіку доступу до даних без потреби вносити зміни по 
всьому застосунку. Крім того, використання репозиторіїв спрощує тестування і 
дозволяє легко реалізовувати заміщення залежностей, що особливо корисно при 
модульному тестуванні. Це також сприяє реалізації принципів SOLID, зокрема 
принципу єдиної відповідальності та інверсії залежностей. 
3.2.3. Основні екрани та форми: товари, продажі, персонал, аналітика 
Робота програми починається із запиту на введення логіну та паролю. 
Відповідно до ролі користувача буде надано доступ до основних пунктів меню, 
які на початку роботи програми недоступні. На рисунку 3.14 зображено інтерфейс 
для введення логіну та паролю.  
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
47 
Рисунок 3.14 – Інтерфейс для введення логіну та паролю 
Після успішного введення необхідних даних користувачеві надається 
доступ до пунктів меню. Якщо користувач має роль адміністратора, то йому 
доступні всі пункти меню. Також надається можливість додавати нових 
користувачів, надаючи їм певну роль. На рисунку 3.15 зображено доступні пункти 
меню відповідно до ролі користувача.  
3.15 – Доступні пункти меню відповідно до ролі користувача. 
Якщо користувач має роль менеджера, то він позбавляється ролі додавати 
інших користувачів та редагувати ролі, проте користувач все одно може 
оперувати всіма іншими пунктами меню, зокрема Stores, Operations, Products, 
Categories та Reports. Роль касир є найбільш обмеженою в цій системі, адже 
доступ надається тільки над керуванням магазинами, продажами, операціями та 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
48 
продуктами, що є логічним, адже це основні пункти, необхідні для використання 
системи та забезпечення діяльності торгової точки. 
На рисунку 3.16 зображено вікно для перегляду, додавання, редагування та 
видалення категорій продуктів. Аналогічний вигляд мають інші пункти меню, 
крім Stores та Reports.  
3.16 – Інтерфейс CRUD-операцій над категоріями продуктів. 
При натисканні на кнопку «Add Category» посередині екрану з’являється 
нова форма для додавання або редагування категорії. Форму для додавання 
зображено на рисунку 3.17. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
49 
Рисунок 3.17 – Форма для додавання категорії. 
При натисканні на кнопку «Update Product» запускається аналогічне вікно, 
як у випадку із додаванням, проте змінюється текст міток, а також підтягується 
значення обраного користувачем запису в таблиці, який необхідно редагувати. 
Приклад форми для редагування зображено на рисунку 3.18. 
Рисунок 3.18 – Форма для редагування категорії. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
50 
У випадку, коли користувачеві необхідно видалити певний рядок, то цей 
рядок треба виділити та натиснути на кнопку «Delete». Після цього з’явиться 
діалогове вікно, в якому буде запрошено підтвердження на видалення. Діалогове 
вікно для видалення запису зображено на рисунку 3.19. 
Рисунок 3.19 – Діалогове вікно для видалення запису. 
Варто також відмітити, що в деяких пунктах меню, під час додавання певних 
сутностей в таблицю може виникнути необхідність обрати дані з вже існуючого 
переліку даних. Наприклад, при створенні продукту треба обрати категорію. 
Даний вибір забезпечений через використання елементу ComboBox, який надає 
перелік можливих опцій. Даний перелік заповнюється програмно під час запуску 
потрібного вікна. На рисунку 3.20 зображено інтерфейс для додавання продукту. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
51 
Рисунок 3.20 – Інтерфейс для додавання продукту. 
На рисунку 3.21 представлено основне вікно для роботи з торговими 
точками. В цьому пункті меню також можна переглянути, додати, редагувати або 
видалити продукти або продажі, що пов’язані з певною торговою точкою.  
Рисунок 3.21 – Вікно для роботи з торговими точками 
Перегляд всіх продуктів, що є наявними у певному магазині, буде 
доступним після вибору потрібної торгової точки та натискання кнопки «Show All 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
52 
Products». Перегляд всіх продажів працює аналогічно. На рисунку 3.22 
представлено меню перегляду всіх продуктів обраної торгової точки.  
Рисунок 3.22 – Меню перегляду всіх продуктів обраної торгової точки. 
В цьому ж пункті меню можна керувати інвентарем торгової точко. Можна 
додати, видалити та редагувати продукти на складі. На рисунку 3.23 зображено 
форму для роботи з інвентарем. 
Рисунок 3.23 – Форма для роботи з інвентарем 
Для кожного пункту меню забезпечено обробку подій кнопок, що 
відповідають за проведення операцій над даними. Основна мета створення цих 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
53 
обробок подій — взаємодія користувача з графічним інтерфейсом для створення, 
редагування, видалення та перегляду інформації. Усі дії реалізовані з 
використанням асинхронних методів та патерну репозиторію, який здійснює 
обмін даними з API. 
− Як приклад можна привести наступні методи для роботи з меню 
«Stores»: 
− Метод btnStoreAdd_Click ініціює відкриття форми створення нової 
торгової точки (StoresCreateEditForm). У разі підтвердження змін 
користувачем, відбувається оновлення таблиці торгових точок шляхом 
виклику методу ReadShowStores(). 
− Метод btnStoreDelete_Click реалізує логіку видалення торгової точки, 
попередньо отримуючи ідентифікатор обраного запису з DataGridView. 
Після підтвердження дії користувачем, запис видаляється через API, і 
дані оновлюються. 
− Метод btnStoreUpdate_Click відповідає за редагування торгової точки. 
Він формує об'єкт Store на основі даних обраного рядка таблиці, передає 
його у форму редагування і, після внесення змін, оновлює відображення 
даних. 
− Методи showAllProducts_Click та showAllSales_Click відповідають за 
перегляд пов’язаної з обраною торговою точкою інформації — 
відповідно списку товарів та продажів. Для цього відкриваються 
відповідні форми з передачею об’єкта Store. 
Ключовою особливістю є те, що всі операції виконуються через репозиторій 
StoreRepository, який інкапсулює логіку звернення до API. Це забезпечує 
розділення відповідальностей між представленням (інтерфейсом користувача) та 
логікою обробки даних. 
За цим самим принципом побудовані всі інші форми додатку, що 
відповідають за керування іншими сутностями, зокрема категоріями, товарами, 
користувачами, складами тощо. Такий підхід дозволяє забезпечити уніфікований, 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
54 
зручний та масштабований механізм взаємодії з даними в межах клієнтської 
частини застосунку. 
Варто розглянути пункт меню «Reports», що відповідає за генерацію звітів 
у форматі .xlsx або .html. Вікно для отримання звітів складається з виведення 
основних цифрових даних про систему та кнопок, натискаючи на які користувач 
запускає алгоритм конвертації даних в потрібний формат, а також збереження 
файлу з результатом. На рисунку 3.24 зображено інтерфейс для генерації звітів. 
Рисунок 3.24 – Інтерфейс для генерації звітів. 
Основні дії алгоритму генерації XLSX-звіту про продажі: 
1. Отримання даних з API: 
Ініціалізуються відповідні репозиторії: StoreRepository, ProductRepository, 
SalesRepository, UsersRepository, SaleProductRepository. Кожен з них асинхронно 
завантажує відповідні колекції об'єктів (торгові точки, товари, продажі, 
користувачі та зв’язки продажів з товарами). 
2. Формування базової моделі звіту (SalesInfo): 
На основі кожного запису про продаж (Sale) створюється об'єкт SalesInfo, 
до якого одразу додається основна інформація: ID продажу, ID користувача, ПІБ 
користувача, ID магазину, назва магазину, адреса та дата створення магазину. Ці 
об'єкти додаються до списку salesInfo. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
55 
3. Збагачення об'єктів SalesInfo деталями товарів: 
Для кожного об’єкта SalesInfo виконується пошук відповідних записів у 
колекції saleProducts. Якщо ідентифікатори продажу збігаються, до SalesInfo 
додається інформація про товар: назва, SKU, ціна, кількість і загальна сума 
(кількість × ціна). 
4. Додавання категорії товару: 
Для кожного об'єкта SalesInfo виконується пошук відповідного товару у 
списку products, і витягується назва категорії, яка записується у властивість 
CategoryName. 
5. Додавання ролі користувача: 
Для кожного об'єкта SalesInfo виконується пошук користувача за ID у 
списку users, після чого додається назва його ролі до RoleName. 
6. Ініціалізація діалогу збереження файлу: 
За допомогою SaveFileDialog користувач обирає місце та ім’я майбутнього 
Excel-файлу. Формат файлу фіксований — .xlsx. 
7. Створення Excel-документа: 
Ініціалізується об’єкт ExcelPackage. У ньому створюється аркуш під назвою 
“SalesInfo”. У першому рядку аркуша розміщуються заголовки колонок: ID, ім’я 
користувача, роль, товар, категорія, кількість, ціна, SKU, підсумкова сума, назва 
магазину, адреса, дата продажу. 
8. Заповнення таблиці: 
Дані з кожного об'єкта SalesInfo по черзі додаються до рядків таблиці, 
починаючи з другого рядка. Кожне поле вставляється у відповідну колонку. 
9. Форматування таблиці: 
За допомогою методу AutoFitColumns() встановлюється автоматичне 
підбирання ширини колонок згідно з їх вмістом. 
10.  Збереження файлу: 
Створений Excel-файл зберігається у вибране користувачем місце, а після 
успішного збереження виводиться повідомлення з підтвердженням операції. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
56 
Користувач отримує сформований .xlsx-файл з деталізованим звітом про всі 
продажі, включаючи інформацію про продавця, товар, його категорію, магазин, 
загальну вартість, а також дату операції. Такий підхід забезпечує зручне 
представлення даних у вигляді таблиці та можливість подальшого аналізу, друку 
або архівування. 
На рисунку 3.25 зображено результат звіту в форматі .xlsx, отриманого після 
генерації. 
Рисунок 3.25 – Результат звіту в форматі .xlsx. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
57 
4. 
АНАЛІЗ ТА ТЕСТУВАННЯ СИСТЕМИ УПРАВЛІННЯ МЕРЕЖЕЮ 
ТОРГОВИХ ТОЧОК 
4.1. Тестування функціоналу клієнтської частини 
Клієнтська частина програмного забезпечення відіграє ключову роль у 
взаємодії користувача з системою, забезпечуючи зручний інтерфейс для роботи з 
даними. Для підтвердження коректності її роботи було проведено тестування 
основного функціоналу, що охоплює створення, перегляд, редагування та 
видалення даних, а також взаємодію з API. Метою тестування є виявлення 
можливих помилок, перевірка стабільності роботи інтерфейсу та забезпечення 
відповідності програмного продукту поставленим вимогам.  
На рисунку 4.1. зображено спробу додавання нового продукту. 
Рисунок 4.1 – Спроба додати новий продукт. 
На рисунку 4.2 продемонстровано, що новий продукт було успішно додано.  
4.2 – Відображення нового продукту. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
58 
На рисунку 4.3 зображено спробу оновити доданий продукт, шляхом 
введення нових тестових даних. 
Рисунок 4.3 – Спроба оновити продукт. 
На рисунку 4.4 зображено результат оновлення продукту. Замість старих 
даних відображені нові, введені під час оновлення. 
Рисунок 4.4 – Відображення оновленого продукту. 
Також необхідно протестувати видалення. На рисунку 4.5 зображено всі 
наявні продукти, окрім того, що був доданий для тесту. Продукт із оновленою 
назвою «Updated» було видалено. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
59 
Рисунок 4.5 – Оновлений список продуктів після видалення. 
На рисунку 4.6 відображено спробу додати нову торгову точку до переліку 
вже існуючих. 
Рисунок 4.6 – Спроба додавання нової торгової точки. 
Додавання пройшло успішно. На рисунку 4.7 продемонстровано оновлений 
перелік торгових точок, відсортований за назвою та за алфавітом в протилежному 
порядку, для того, щоб швидше знайти новий запис «Test Store». 
Рисунок 4.7 – Спроба додавання нової торгової точки «Test Store». 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
60 
Після додавання нового запису була проведена спроба перейменувати 
торгову точку. Для цього було введено нові дані після натискання на кнопку 
«Update Store». Результат оновлення продемонстровано на рисунку 4.8. Назва 
точки «Test Store» було змінено на назву «Updated Test Store».  
Рисунок 4.8 – Спроба оновлення торгової точки «Test Store» на «Updated Test 
Store». 
Проведено спробу видалення торгової точки. Для видалення було обрано 
той самий запис із назвою «Updated Test Store». Результат видалення 
продемонстровано на рисунку 4.9. 
Рисунок 4.9 – Перелік торгових точок після видалення торгової точки «Updated 
Test Store». 
На рисунку 4.10 продемонстровано всі продукти, які наявні в торговій 
точці «Badiory» за адресою «Kov. Lane 4».   
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
61 
Рисунок 4.10 – Продукти, наявні в торговій точці «Badiory» за адресою «Kov. 
Lane 4». 
На рисунку 4.11 відображено спробу додавання нового продукту до 
інвентарю  торгової точки «Badiory» за адресою  «Kov. Lane 4».   
Рисунок 4.11 – Спроба додавання нового продукту до інвентаря  торгової точки 
«Badiory» за адресою  «Kov. Lane 4».   
На рисунку 4.12 продемонстровано результат успішного додавання 
продукту до інвентарю.  
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
62 
Рисунок 4.12 – Результат успішного додавання продукту до інвентарю. 
На рисунку 4.13 продемонстровано спробу оновити кількість продукту, що 
було додано в попередній дії. 
Рисунок 4.13 – Спроба оновлення кількості продуктів «Action Camera». 
На рисунку 4.14 продемонстровано результат оновлення. Операція 
пройшла успішно. 
Рисунок 4.14 – Результат оновлення кількості продуктів «Action Camera». 
Проведено спробу видалення продукту. Результат видалення 
продемонстровано на рисунку 4.15. Продукт було успішно видалено з інвентарю 
торгової точки. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
63 
Рисунок 4.15 – Результат видалення продукту «Action Camera». 
4.2. Тестування API та запитів до БД 
Оскільки система побудована за принципом клієнт-серверної архітектури, 
важливим етапом є тестування серверної частини – зокрема, API, який забезпечує 
обмін даними між інтерфейсом користувача та базою даних. Правильна робота 
API гарантує, що дані будуть оброблятися надійно, а функціонал – працювати 
безпомилково. У межах цього розділу здійснюється перевірка основних HTTP
запитів (GET, POST, PUT, DELETE), які використовуються для взаємодії з даними 
в базі. 
Тестування API буде проводитися за допомогою Swagger – інтерактивного 
інструменту для візуалізації, перевірки та документування REST API. Swagger 
автоматично генерується на основі атрибутів контролера в ASP.NET Core, 
дозволяючи в зручній формі тестувати всі доступні методи контролера без 
необхідності створення зовнішнього клієнта. Це значно пришвидшує процес 
перевірки роботи серверної логіки та надає наочне уявлення про доступні 
маршрути, параметри запитів і відповіді. 
На рисунку 4.16 відображено всі записи таблиці «Stores». Ці записи мають 
бути отримані шляхом надсилання HttpGet запиту у форматі JSON. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
64 
Рисунок 4.16 – Записи таблиці «Stores». 
На рисунку 4.17 показано результат HttpGet-запиту за посиланням 
https://localhost:7015/api/Stores. Отримано код 200, що свідчить про успішність 
запиту. Також на рисунку 4.17 показано отримані дані у форматі JSON. 
Рисунок 4.17 – Результат запиту HttpGet за адресою 
https://localhost:7015/api/Stores. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
65 
На рисунку 4.18 показано спробу зробити HttpPost-запит задля того, щоб 
створити новий рядок у таблиці Stores. Посилання для запиту 
https://localhost:7015/api/Stores.  
Рисунок 4.18 – Спроба надсилання HttpPost-запиту. 
На рисунку 4.19 зображено Request Body запиту. В ньому передається 
новий ідентифікатор запису, а також назва торгової точки, адреси та дата 
створення запиту. 
Рисунок 4.19 – Request Body запиту. 
Статус-код запиту 200, що означає про успішність створення нового рядка 
в таблиці. Також можна перевірити наявність нового запису безпосередньо в 
таблиці. На рисунку 4.20 зображено всі записи таблиці Stores. В кінці таблиці 
видно рядок з тими даними, які були у Request Body запиту попереднього 
запиту. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
66 
Рисунок 4.20 – Всі записи таблиці Stores. 
На рисунку 4.21 показано результат HttpGet-запиту за посиланням 
https://localhost:7015/api/Stores/ea8364bb-16f0-416e-b029-cae402305963. Цей запит 
містить ідентифікатор рядка, який треба отримати від програми. Отримано код 
200, а разом з ним і дані рядка. Це свідчить про успішність запиту.  
Рисунок 4.21 – Всі записи таблиці Stores. 
На рисунку 4.22 показано результат HttpPut-запиту за посиланням 
https://localhost:7015/api/Stores/ea8364bb-16f0-416e-b029-cae402305963. HttpPut
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
67 
запит відповідає за оновлення існуючого рядка. Він містить ідентифікатор рядка, 
а також нові дані, які мають замінити записи старого рядка. Отримано код 200. Це 
свідчить про успішність запиту.  
Рисунок 4.22 – Всі записи таблиці Stores. 
На рисунку 4.23 відображено всі записи таблиці «Stores». Ці записи мають 
бути отримані шляхом надсилання HttpGet запиту у форматі JSON.  
Рисунок 4.23 – Всі записи таблиці Stores після оновлення. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
68 
В кінці таблиці присутній рядок із оновленими даними. Це підтверджує 
успішну операцію оновлення даних. 
На рисунку 4.24 показано результат HttpDelete-запиту за посиланням 
https://localhost:7015/api/Stores/ea8364bb-16f0-416e-b029-cae402305963. 
HttpDelete-запит відповідає за видалення існуючого рядка. Він містить тільки 
ідентифікатор рядка. Отримано код 200. Це свідчить про успішність запиту.  
Рисунок 4.24 – Всі записи таблиці Stores після оновлення. 
На рисунку 4.25 показано результат видалення. Рядок, з яким проводилось 
тестування в попередніх діях, не є присутнім в базі даних. 
Рисунок 4.25 – Всі записи таблиці Stores після оновлення. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
69 
5. 
ШЛЯХИ ПОЛІПШЕННЯ ТА ПЕРСПЕКТИВИ РОЗВИТКУ 
5.1. Можливості розширення функціоналу 
У подальшому розвиток системи може бути спрямований на додавання нових 
модулів та сервісів, які значно поглиблять та розширять її можливості. Кожне з 
наведених покращень ґрунтується на конкретній меті – підвищити ефективність 
бізнес-процесів, гнучкість налаштування під користувача або надійність і безпеку 
роботи. Конкретні варіанти покращення описано далі: 
1. Розширена підтримка офлайн-режиму з автоматичною синхронізацією 
даних. 
Таке покращення забезпечить безперебійну роботу в регіонах зі слабким або 
нестабільним інтернет-з’єднанням. Кешування даних та черга операцій на клієнті 
дозволять проводити продажі та оновлювати залишки навіть без доступу до 
сервера, а після відновлення з’єднання всі дані будуть автоматично 
синхронізовані. Таке впровадження підвищить стійкість системи та задоволеність 
користувачів у віддалених магазинах. 
2. Розгортання контейнеризованих мікросервісів із CI/CD. Перехід до 
мікросервісної архітектури в Docker/Kubernetes (AKS, EKS) із 
налаштованим конвеєром CI/CD дозволить автоматично тестувати, збирати 
та розгортати оновлення в кілька кліків, мінімізуючи час простою. Метою є 
прискорення циклів розробки, підвищення стабільності та легкість 
масштабування окремих компонентів системи. 
3. Інтеграція зі службами єдиного входу (SSO) та багатофакторною 
автентифікацією. Забезпечення централізованого керування доступом через 
корпоративні LDAP/Active Directory або протоколи OAuth2/OpenID Connect 
дозволить підвищити рівень безпеки та спростить адміністрування великої 
кількості користувачів у великих мережах. Багатофакторна автентифікація 
зменшить ризик несанкціонованого доступу до конфіденційних даних про 
продажі та залишки й поліпшить існуючу ієрархію користувачів. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
70 
4. 
Впровадження аналітики користувацької поведінки (User Behavior 
Analytics). Збирання та аналіз метрик щодо того, які функції системи 
використовуються найчастіше, допоможе пріоритизувати розвиток продукту та 
оптимізувати інтерфейс під реальні сценарії застосування. Це підвищить загальну 
продуктивність персоналу та скоротить час навчання нових співробітників. 
Усі запропоновані покращення системи вплинуть на підтримку стійкості роботи 
та масштабування функціоналу. Поточні варіанти удосконалення є реалістичними 
й заплановано відповідно до характеристик розробленої системи. 
5.2. Інтеграція з хмарними сервісами 
Окремим елементом покращення функціонування системи можна виділити 
використання хмарних сервісів. Вони дозволяють швидко розгорнути 
інфраструктуру, забезпечують автоматичне масштабування ресурсів у відповідь 
на зміну навантаження та гарантують високу надійність за рахунок розподіленого 
зберігання й резервування даних. Інтеграція системи з хмарною інфраструктурою 
забезпечує її високу доступність, гнучкість і здатність автоматично адаптуватися 
до змін навантаження.  
Одним з варіантів використання хмарного середовище є перенесення 
серверної частини та бази даних на такі платформи як IaaS чи PaaS дозволяє 
звільнитися від ручного керування фізичними серверами, зосередившись на 
розвитку бізнес-логіки і функціоналу. А використання контейнеризації (Docker, 
Kubernetes), як було запропоновано в пукнті 5.1, у поєднанні з хмарними 
менеджерами допоможе автоматично масштабувати мікросервіси відповідно до 
обсягу запитів, що критично підвищує продуктивність у пікові години продажів. 
Застосування об’єктного сховища (наприклад, Amazon S3 або Azure Blob Storage) 
для архівування звітних даних, медіафайлів і резервних копій дає змогу 
гарантувати цілісність інформації та швидку доставку контенту через CDN
мережі без навантаження основної бази даних. Крім того, хмарні функції (Azure 
Functions чи AWS Lambda) стають потужним інструментом для фонового 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
71 
оброблення подій – надсилання сповіщень, формування щоденних зведень чи 
оптимізація кешу – без необхідності завантажувати основний API. 
За допомогою хмарних сервісів можна також покращити роботу з базою 
даних. Аналітичні сервіси Big Data, такі як Azure Synapse або Amazon Redshift, 
дозволяють виконувати складні обчислювальні запити на великих обсягах даних. 
Це відкриває можливість гнучко формувати дашборди та звіти для 
адміністраторів, використовуючи вбудовані інструменти візуалізації (Power BI, 
QuickSight). Звільнення від рутинної обробки даних та перехід до спеціалізованих 
сховищ сприяє значному скороченню часу прийняття управлінських рішень. 
Описані ідеї інтеграції хмарних сервісів до розробленої системи допоможуть при 
масштабуванні системи, додаванні нових функціональних характеристик та при 
роботі з великими даними. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
72 
ВИСНОВКИ 
У ході виконання дипломного проєкту було реалізовано повноцінну 
комп’ютерну систему для централізованого управління мережею торгових точок, 
яка охоплює ключові функціональні компоненти сучасних облікових та 
аналітичних систем. Основною метою розробки стало створення масштабованого, 
надійного та інтуїтивно зрозумілого інструменту, що дозволяє автоматизувати 
щоденні бізнес-процеси — від обліку товарів до формування звітності. 
У першому розділі було проведено огляд існуючих рішень у галузі 
управління торговими точками, таких як Poster POS, 1С:Підприємство, 
RetailCRM, iiko тощо. Детально проаналізовано їх функціональні можливості та 
виявлено низку недоліків, серед яких: складність кастомізації, висока вартість, 
прив’язаність до хмарних сервісів та складність інтеграції. Саме ці аспекти стали 
підставою для розробки власної системи, орієнтованої на потреби малого та 
середнього бізнесу в Україні. 
У другому розділі було спроєктовано архітектуру програмного 
забезпечення, що базується на трикомпонентній клієнт-серверній моделі. 
Виділено клієнтську частину (WinForms-додаток), серверну частину (ASP.NET 
Core Web API) та базу даних (PostgreSQL). Обґрунтовано вибір усіх застосованих 
технологій: C# — як мови програмування; Entity Framework Core — як ORM для 
зручної роботи з базою; HTTP-протокол і RESTful API — для зв’язку між клієнтом 
і сервером. Також сформовано вимоги до інтерфейсу користувача, його зручності, 
функціональності та відповідності ролям користувачів системи. 
Особливу увагу приділено проєктуванню бази даних, яка відповідає першій, 
другій та третій нормальним формам, що забезпечує мінімізацію надмірностей та 
запобігає логічним помилкам. Таблиці логічно організовані, підтримують зв’язки 
через зовнішні ключі, дозволяючи легко масштабувати систему та виконувати 
складну аналітику. Розглянуто кожну сутність: користувачів, ролі, магазини, 
категорії товарів, залишки, продажі та їх деталізацію. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
73 
У третьому розділі було реалізовано всі компоненти системи. Серверна 
частина, написана на ASP.NET Core, забезпечує обробку HTTP-запитів, взаємодію 
з базою даних через EF Core та реалізацію бізнес-логіки. Детально описано 
контролери, сервісні класи, контекст бази даних та використані атрибути C#. 
Обґрунтовано використання асинхронності, яка дозволяє ефективно обробляти 
множинні запити та знижує навантаження на сервер. 
Клієнтський застосунок реалізовано засобами WinForms. Наведено опис 
головного меню, роботи з API через репозиторії, побудови інтерфейсу з 
використанням DataGridView, форм взаємодії з користувачем. Також описано 
механізм генерації HTML та XLSX звітів з використанням EPPlus, що дозволяє 
створювати документи з детальною інформацією про продажі, товари, 
користувачів, магазини тощо. Усі запити до API обробляються централізовано, 
забезпечуючи цілісність і узгодженість даних між клієнтом і сервером. 
У четвертому розділі розглянуто тестування системи: тестування 
клієнтської частини — шляхом перевірки роботи з формами, кнопками та 
відображенням даних; тестування API — через Swagger, який дає змогу 
інтерактивно надсилати запити до серверної частини, перевіряти коректність 
маршрутів, відповідей та взаємодії з базою. 
У процесі реалізації було виконано всі завдання, зазначені в технічному 
завданні: розроблено архітектуру системи, спроєктовано та реалізовано базу 
даних, побудовано серверну частину з використанням RESTful API, реалізовано 
клієнтський застосунок з графічним інтерфейсом, забезпечено фільтрацію, 
авторизацію, підтримку ролей, реалізовано механізм звітності у форматах 
HTML/XLSX, роведено аналіз та тестування працездатності. 
Розроблена система є гнучкою, масштабованою та зручною в користуванні. 
Вона може бути легко адаптована під реальні потреби малого або середнього 
бізнесу, а її архітектура дозволяє подальший розвиток — від підключення 
мобільного додатку до інтеграції з хмарними сервісами або сторонніми системами 
аналітики. Таким чином, поставлена мета досягнута повністю, а створена 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
74 
комп’ютерна система відповідає сучасним вимогам до програмного забезпечення 
для обліку та управління торговою мережею. 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
75 
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ 
1. Poster POS [Електронний ресурс]. – Режим доступу до ресурсу:  
https://joinposter.com/ua 
2. 1С Підприємство [Електронний ресурс]. – Режим доступу до ресурсу:  
https://itez.com.ua/what-is-1c.html 
3. RetailCRM [Електронний ресурс]. – Режим доступу до ресурсу:  
https://proficrm.com.ua/retailcrm/ 
4. Iiko [Електронний ресурс]. – Режим доступу до ресурсу:  https://magnat
trade.com.ua/iiko-avtomatizaciya-restorana/ 
5. Square POS [Електронний ресурс]. – Режим доступу до ресурсу: 
https://www.deliverect.com/en/blog/pos-systems/square-pos-system-101-the-complete-guide
2024 
6. Lightspeed [Електронний ресурс]. – Режим доступу до ресурсу: 
https://www.lightspeedhq.com/ 
7. Shopify POS [Електронний ресурс]. – Режим доступу до ресурсу: 
https://www.shopify.com/pos 
8. RESTful API [Електронний ресурс]. – Режим доступу до ресурсу:  
https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design 
9. Архітектура системи [Електронний ресурс]. – Режим доступу до ресурсу:  
https://pupenasan.github.io/ProgIngContrSystems/%D0%9B%D0%B5%D0%BA%D1%86/6_htt
 papi.html 
10.  Тип даних uuid [Електронний ресурс]. – Режим доступу до ресурсу:  
https://uk.php.brj.cz/uuid-i-produktivnist-velikomasstabnih-dodatkiv 
11.  Нормальні форми [Електронний ресурс]. – Режим доступу до ресурсу:  
https://javarush.com/ua/quests/lectures/ua.questhibernate.level17.lecture02 
12.  C# 4.0 The Complete Reference. — М. : «Вільямс», 2011. — С. 34 – 44. 
13.  PostgreSQL [Електронний ресурс]. – Режим доступу до ресурсу:  
https://postgrespro.com/docs 
14.  Windows Forms [Електронний ресурс]. – Режим доступу до ресурсу:  
https://learn.microsoft.com/uk-ua/dotnet/desktop/winforms/?view=netframeworkdesktop-4.8 
15.  ASP .NET Core [Електронний ресурс]. – Режим доступу до ресурсу:  
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
76 
https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-9.0 
Зм 
Лист 
№ докум. 
Підп. 
Дата 
ІАЛЦ.045440.003 ПЗ 
ПЗ 
Лис
 т 
77 
ДОДАТОК 1 
Комп’ютерна система управління мережею торгових точок 
Схема алгоритму роботи серверного застосунку 
ІАЛЦ. 045440.004 Д1 
Аркушів 1 
Київ 2025
 
 
Комп’ютерна система управління мережею 
торгових точок 
Схема алгоритму роботи 
серверного застосунку НТУУ «КПІ ім. Ігоря 
Сікорського», ФПМ, КВ-11 
1 1 
Аркушів Аркуш Літ. Чебан М.Д. 
Романкевич В.О.  
 
Павловський В.І. 
Клятченко Я.М. 
 Затв. 
 
Перев. 
Н. контр. 
Розроб. 
Дата Підп. № докум. Лист Зм
 м 
ІАЛЦ. 045440.004 Д1 
ДОДАТОК 2 
Комп’ютерна система управління мережею торгових точок 
Схема алгоритму роботи клієнтського застосунку 
ІАЛЦ. 045440.005 Д2 
Аркушів 1 
Київ 2025
 
 
Комп’ютерна система управління мережею 
торгових точок 
Схема алгоритму роботи 
клієнтського застосунку НТУУ «КПІ ім. Ігоря 
Сікорського», ФПМ, КВ-11 
1 1 
Аркушів Аркуш Літ. Чебан М.Д. 
Романкевич В.О.  
 
Павловський В.І. 
Клятченко Я.М. 
 Затв. 
 
Перев. 
Н. контр. 
Розроб. 
Дата Підп. № докум. Лист Зм
 м 
ІАЛЦ. 045440.005 Д2 
 
ДОДАТОК 3 
Комп’ютерна система управління мережею торгових точок 
Алгоритм роботи системи 
ІАЛЦ. 045440.006 Д3 
Аркушів 1 
Київ 2025
 
 
Комп’ютерна система управління мережею 
торгових точок 
Алгоритм роботи системи НТУУ «КПІ ім. Ігоря 
Сікорського», ФПМ, КВ-11 
1 1 
Аркушів Аркуш Літ. Чебан М.Д. 
Романкевич В.О.  
 
Павловський В.І. 
Клятченко Я.М. 
 Затв. 
 
Перев. 
Н. контр. 
Розроб. 
Дата Підп. № докум. Лист Зм
 м 
ІАЛЦ. 045440.006 Д3 
 
 
ДОДАТОК 4 
Комп’ютерна система управління мережею торгових точок 
Діаграма класів клієнтського та серверного додатків 
ІАЛЦ. 045440.007 Д4 
Аркушів 1 
Київ 2025
 
 
 
 
 
 
 
Діаграма класів клієнтського та 
серверного додатків 
НТУУ «КПІ ім. Ігоря 
Сікорського», ФПМ, КВ-11 
1 1 
Аркушів Аркуш Літ. 
Чебан М.Д. 
Романкевич В.О.  
 
Павловський В.І. 
 
Затв. 
 
Перев. 
Н. контр. 
Розроб. 
Дата Підпис № документа Арк. Зм. 
ІАЛЦ. 045440.007 Д4 
 
Комп’ютерна система управління 
мережею торгових точок 
 
Клятченко Я.М. 
ДОДАТОК 5 
Комп’ютерна система управління мережею торгових точок 
Презентація 
Аркушів 7 
Київ 2025 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 